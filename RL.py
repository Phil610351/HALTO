from keras.layers import Flatten, Dense, Activation
from keras.models import Sequential
from math import log2
from time import time
import matplotlib.pyplot as plt
import numpy as np
#import os
#os.environ["CUDA_VISIBLE_DEVICES"] = "0"

#302
traffic=[29, 32, 39, 43, 50, 38, 38, 22, 12, 6, 3, 2, 3, 3, 7, 12, 15, 20, 28, 26, 33, 39, 36, 44, 30, 36, 41, 50, 48, 45, 32, 22, 12, 7, 4, 2, 1, 3, 7, 13, 25, 30, 28, 37, 39, 42, 47, 38, 32, 43, 45, 44, 49, 51, 42, 31, 19, 9, 5, 3, 2, 3, 6, 13, 19, 27, 27, 32, 43, 47, 55, 46, 35, 36, 39, 43, 38, 46, 37, 29, 23, 15, 6, 2, 1, 2, 4, 6, 13, 18, 26, 35, 37, 37, 36, 43, 39, 37, 48, 43, 43, 40, 35, 31, 21, 14, 6, 3, 2, 2, 3, 7, 11, 17, 25, 34, 40, 41, 43, 38, 26, 32, 41, 36, 43, 52, 39, 28, 20, 13, 6, 4, 3, 3, 7, 17, 24, 26, 37, 34, 39, 38, 46, 44, 37, 38, 47, 48, 52, 59, 46, 30, 16, 9, 3, 2, 3, 3, 6, 16, 19, 23, 26, 32, 33, 39, 44, 43, 33, 41, 42, 39, 51, 57, 44, 28, 20, 10, 5, 2, 1, 3, 6, 12, 23, 28, 27, 34, 35, 48, 50, 49, 36, 44, 45, 44, 49, 51, 48, 32, 20, 12, 5, 4, 2, 3, 6, 15, 19, 19, 33, 33, 33, 43, 46, 39, 35, 42, 48, 47, 51, 63, 50, 35, 24, 14, 6, 3, 2, 2, 6, 14, 22, 29, 26, 33, 42, 48, 48, 42, 37, 41, 41, 38, 41, 40, 33, 26, 22, 12, 5, 3, 1, 2, 3, 9, 14, 20, 22, 29, 33, 35, 38, 41, 35, 38, 38, 42, 42, 42, 36, 31, 24, 17, 9, 5, 4, 3, 3, 3, 10, 16, 21, 29, 33, 39, 42, 39, 32, 46, 49, 52, 52, 57, 45, 32, 20, 10, 3, 4, 3, 2]

history=6
epsilon=1
gamma=0.9
zeta=150

N=1e-10
F=10

num=40

def cal_profit(users, action):

	def gen_task():
		tasks=dict()
		for i in range(users):
			buf=dict()
			buf['a']=np.random.uniform(100,1000)*2/1000
			buf['d']=buf['a']
			buf['fl']=np.random.uniform(1.5,2.5)
			buf['Tm']=np.random.uniform(0.1,1)
			buf['pri']=np.random.uniform(0.1,1)*5
			buf['SINR']=(10**np.random.uniform(4,10))*7.5/N
			tasks[i]=buf
		return tasks

	def iterative(tasks):
		B=0.1+action*0.3

		xi=list()
		b=[0]*users
		reserved_b=[0]*users
		for e in tasks.values():
			xi.append( 1-min(1,e['Tm']*e['fl']/e['d']) )
		
		tasks=sorted(tasks.items(), key=lambda kv: -kv[1]['pri']/(kv[1]['a']/kv[1]['Tm']/log2(1+kv[1]['SINR'])) )

		#occupied bandwidth
		remaining=B
		for e in tasks:
			#allocate minimum bandwidth
			bi=xi[e[0]]*e[1]['a']/e[1]['Tm']/log2(1+e[1]['SINR'])
			if remaining-bi<0:
				break
			else:
				remaining-=bi
				reserved_b[e[0]]=bi

		for e in tasks:
			b[e[0]]=reserved_b[e[0]] + remaining/users

		i=0
		while i<10:
			#update x
			for e in tasks:
				xi[e[0]]=e[1]['d']/e[1]['fl']/( e[1]['a']/(b[e[0]]*log2(1+e[1]['SINR'])) + e[1]['d']/e[1]['fl'] )

			#sum of sqrt
			ss=0
			for e in tasks:
				ss+=(xi[e[0]]*e[1]['a']*e[1]['pri']/log2(1+e[1]['SINR']))**0.5

			#update b
			for e in tasks:
				b[e[0]]=reserved_b[e[0]] + ((xi[e[0]]*e[1]['a']*e[1]['pri']/log2(1+e[1]['SINR']))**0.5)*remaining/ss
			i+=1

		reward=0
		for e in tasks:
			if xi[e[0]]!=0:
				t=max( (1-xi[e[0]])*e[1]['d']/e[1]['fl'], xi[e[0]]*e[1]['a']/b[e[0]]/log2(1+e[1]['SINR']))
			else:
				t=(1-xi[e[0]])*e[1]['d']/e[1]['fl']

			if t<e[1]['Tm']:
				reward+=e[1]['pri']*(1-t/(e[1]['d']) )
		
		return reward/users

	QoS=iterative(gen_task())
	revenue=users*QoS*4

	#profit
	return revenue-zeta*(0.1+action*0.3)/1.3


#DRL
def DQL():
	Q=dict()
	exp_x, exp_y=list(), list()

	#DNN
	DNN=Sequential()
	DNN.add(Dense(64, input_shape=(history,)) )
	DNN.add(Dense(64, activation="relu"))
	DNN.add(Dense(5))
	DNN.compile(loss='mae', optimizer='adam', metrics=['mae'])

	def init():
		for i in range(history, len(traffic)-1):
			Q[str(traffic[i-history:i])]=dict()
			for e in range(5):
				Q[str(traffic[i-history:i])][e]=0


	#agent explore env 一個episode
	def play(episode):
		global epsilon
		for i in range(history, len(traffic)-1):
			state=traffic[i-history:i]
			exp_x.append(state)

			#epsilon-greedy
			if np.random.rand()<epsilon:
				action=np.random.randint(5)

			else:
				action=DNN.predict(np.array([state]))[0]
				action=list(action).index(max(action))

			if episode>0.01:
				epsilon-=(1-0.01)/10000

			target_Q=DNN.predict(np.array([state]))[0]
			Q[str(state)][action]=(cal_profit(traffic[i+1], action) + Q[str(state)][action]*episode )/(episode+1)
			target_Q[action]=Q[str(state)][action]
			exp_y.append(target_Q)
		

			if len(exp_x)>1000:
				exp_x.pop(0)
				exp_y.pop(0)

		DNN.fit([exp_x], [exp_y], epochs=1, batch_size=128)


	#放現在的agent進去玩
	def exam():
		profit=list()
		perform=0
		for i in range(history, len(traffic)-1):
			state=traffic[i-history:i]
			
			action=DNN.predict(np.array([state]))[0]
			action=list(action).index(max(action))

			for e in range(num):
				perform+=cal_profit(traffic[i+1], action)/traffic[i+1]/num
			#profit.append(cal_profit(traffic[i+1], action)/traffic[i+1])

		#return profit
		return perform/len(traffic)


	def main():
		episode=0
		init()

		x, result=list(), list()

		while episode<1000:
			play(episode)

			#test revenue
			'''if episode%5==0 or episode<30:
				x.append(episode)
				result.append(exam())'''
			print(episode)
			episode+=1

		print(exam())
		'''print(x)
		print(result)
		plt.plot(x,result,"go-",label='DQN')
		plt.xlabel("epochs")
		plt.ylabel("unit_profit")
		plt.legend()
		plt.savefig('unit_profit_DQN.jpg', dpi=600, bbox_inches='tight')
		plt.show()'''

	main()


#純QL, 
def QL():
	Q=dict()

	#Q table
	def init():
		for i in range(history, len(traffic)-1):
			Q[str(traffic[i-history:i])]=dict()
			for e in range(5):
				Q[str(traffic[i-history:i])][e]=0

	#一個episode
	def play(episode):
		global epsilon
		for i in range(history, len(traffic)-1):
			state=str(traffic[i-history:i])
			#epsilon-greedy
			if np.random.rand()<epsilon:
				action=np.random.randint(5)

			else:
				best, action= 0, 0
				for e in Q[state]:
					if Q[state][e]>best:
						best=Q[state][e]
						action=e
				if best==0:
					action=np.random.randint(5)

			if episode>0.01:
				epsilon-=(1-0.01)/10000

			Q[state][action]=(cal_profit(traffic[i+1], action) + Q[state][action]*episode )/(episode+1)

	#放現在的agent進去玩
	def exam():
		profit=list()
		perform=0
		for i in range(history, len(traffic)-1):
			state=str(traffic[i-history:i])
			best, action= 0, 0
			for e in Q[state]:
				if Q[state][e]>best:
					best=Q[state][e]
					action=e
			if best==0:
				action=np.random.randint(5)

			for e in range(num):
				perform+=cal_profit(traffic[i+1], action)/traffic[i+1]/num
			#profit.append(cal_profit(traffic[i+1], action)/traffic[i+1])

		#return sum(profit)
		return perform/len(traffic)


	def main():
		episode=0
		init()

		x, result=list(), list()

		while episode<1000:
			play(episode)
			#test revenue
			#if episode%5==0 or episode<30:
			#	x.append(episode)
			#	result.append(exam())
			print(episode)
			episode+=1

		print(exam())

		'''print(x)
		print(result)
		plt.plot(x,result,"go-",label='unit_profit')
		plt.xlabel("epochs")
		plt.ylabel("unit_profit")
		plt.legend()
		plt.savefig('unit_profit_QL.jpg', dpi=600, bbox_inches='tight')
		plt.show()'''

	main()

#QL()

def draw_learning():
	x=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300, 305, 310, 315, 320, 325, 330, 335, 340, 345, 350, 355, 360, 365, 370, 375, 380, 385, 390, 395, 400, 405, 410, 415, 420, 425, 430, 435, 440, 445, 450, 455, 460, 465, 470, 475, 480, 485, 490, 495]
	QL=[0.17655100614054556, 0.13215352352304918, 0.5113087671194309, 0.7544110766422443, 1.552838777381448, 2.447274122255537, 2.2319735521372257, 2.336694837711219, 2.440184766859992, 2.2480016752641845, 2.596341300084538, 2.6959960382290094, 2.2287442029321443, 2.100534781920668, 2.9471600309912143, 2.657093764779499, 3.5317377695559884, 2.931572943622525, 2.678475470065416, 2.98102490327233, 2.6956148444948256, 2.5424967307838764, 2.6792591720041203, 3.1382158688001978, 2.8557684953617337, 2.7130612390616937, 2.8640535349778, 2.2447303557519827, 3.6241462922388443, 2.675683638348241, 2.2243704153469572, 3.1429475752745963, 2.643062163949253, 2.45891477555965, 3.479533016886682, 3.0339683277208604, 3.1482754365900165, 2.615865344830271, 3.1714758987154616, 2.809235798180776, 2.8172137473503045, 2.948432606666721, 3.045688134505679, 2.3953881771058585, 2.6251742517268046, 2.5696417878990725, 3.036815976272445, 2.863896759011795, 2.3820584305734553, 3.4050571887562295, 3.1641354674199884, 2.9291412708632567, 2.937832417139611, 3.277182924319952, 2.6983587973876246, 2.4673511069439034, 2.7177962336430657, 3.049872479980025, 3.5298603007264657, 3.273434396515072, 3.373879972044591, 3.1769600854262547, 2.936218291362698, 2.9696750446499522, 2.6234595273426247, 2.96603593500793, 2.7611086413002393, 2.8306453809367187, 3.4023562849553324, 2.7226134191166707, 3.254063290869851, 2.5904921675231662, 2.253737240492584, 3.0649163195733693, 2.923473921173615, 2.9109203061871844, 2.697041598027175, 3.1395265492568574, 3.0188810183130004, 2.851183766974364, 3.1366769988115557, 3.3686789818779146, 2.490716704950146, 3.2666780902937633, 2.629935929752442, 3.0589663083297016, 3.0265871061873924, 2.8130124618829613, 3.1850390856468236, 2.4640820858407144, 3.06770286960844, 3.1443109952963053, 2.476362100808477, 3.2809635967938484, 3.1540817994002848, 3.3809698145418685, 2.8277138197576246, 3.258141418336959, 2.823312399247865, 2.9334983336423064, 3.2818772264129326, 3.051697011599968, 2.608984585778873, 2.8047226865065906, 3.2777458150508556, 3.2752349467249906, 3.178908388686372, 2.690929626743369, 3.0504409304150792, 2.8444178881832936, 2.7952338489749975, 2.948377102358589, 2.6053918505194678, 2.91292741960696, 3.4749984212313936, 3.1578578833135653, 2.6972230899470087, 3.3911536732698386, 2.9490304380639407, 2.7104132752751315, 3.4040121007943136, 2.831472150307223, 3.376874142187114, 3.1728475455281444]
	DQN=[-0.6523628868723325, -0.4785827797526772, -0.6335436765692759, -0.43292914172452174, -0.5415941154064517, -0.05613637265485762, -0.42101306905507796, -0.24708988754334993, 0.18129801268047246, -0.23396758067360204, -0.17451676079142595, 0.43518576561999356, 0.2728377083543925, 0.5189154749218545, 0.20023223340170512, 0.22309001609516974, 0.5469338557654805, 0.47511215803176504, 0.21105078091228857, 0.586083757179739, 0.8161075000879588, 0.8017570395319548, 1.5967902186751033, 2.06192007734923, 3.1402169372136375, 3.7210416323268416, 3.831545923893469, 3.8042087926877435, 3.7923038986716837, 3.6778666922988634, 3.1090152817456236, 0.8042274239483231, 1.8683601520594002, 3.0683672510493336, 2.7503512085362494, 3.291960951141157, 3.5941521010398185, 3.606729870908577, 3.601407581267527, 3.398576190571916, 3.746267801903359, 3.4317970372512456, 3.7574088677850903, 3.4961186486616054, 3.575137953402533, 3.767887756393714, 3.5333760385117565, 3.7930835105288963, 3.5784023664913285, 3.7813564667232695, 3.7405014266931995, 3.2476262706388535, 3.808268753255731, 3.735214576486928, 3.8362947655587734, 3.7057080165978094, 3.254690165589193, 3.0319499619077264, 3.046011741607272, 3.7489718706758013, 3.710363784598368, 3.7009961188553926, 3.6552522228148137, 3.8007955414940464, 2.9770416390258028, 3.071599263390002, 3.7170886798812686, 3.713351808882562, 3.693815713806018, 3.7255601563637066, 3.7195863154049436, 3.6764484442116925, 3.7628909595334745, 2.9554633813045834, 3.484340815343391, 3.687328772658633, 3.6237593056961215, 3.6948444907669282, 3.7732874349834327, 3.660276290405231, 3.780717970326122, 3.797975677799609, 3.6022341039738777, 3.751087598218824, 3.812460076003479, 3.8176898103013137, 3.7402862259069156, 3.684941755622886, 3.7710259637370016, 3.8107391605188403, 3.7138335352646523, 3.7633159880273914, 3.7559796727598234, 3.8084935938225466, 3.844125183407615, 3.760258178063171, 3.8126716255860003, 3.7433309543324285, 3.7618293525496114, 3.845143078946826, 3.8293202449508326, 3.7075387594611864, 3.8349457204784003, 3.688194112487738, 3.8260085970864828, 3.786666611373108, 3.778829393155042, 3.7548916871515896, 3.797850590774623, 3.8439857560679966, 3.831196302676697, 3.827313502985335, 3.804812102242877, 3.800272988235223, 3.7961726446625645, 3.755338519049552, 3.7007516835151733, 3.8510290715863937, 3.81528277051993, 3.801256563536208, 3.7941143507964687, 3.806970785800521, 3.728924363995898, 3.831987344159408]
	plt.plot(x,DQN,"g-",label='DQN')
	plt.plot(x,QL,"b-",label='QL')
	plt.xlabel("epochs")
	plt.ylabel("unit profit")
	plt.legend()
	plt.savefig('unit_profit.jpg', dpi=600, bbox_inches='tight')
	plt.show()

def draw_realtime():
	DQN=[3.7478759822441563, 6.999778422507217, 5.548162439677827, 3.450772831470989, 7.5488317592465775, 2.450661125703245, -0.3863408771341715, 4.429300066305992, 4.234993667349308, 2.857718649899319, 4.042397307246467, 4.485683365178893, 5.5824538340356655, 3.9413982558620986, 4.612476052135482, 3.808629377794702, 3.9418445021735207, 5.152369699912471, 5.048862900244765, 3.4934367663833834, 4.94643325708058, 4.245860370984221, 4.341827826413724, 3.59691893555096, 4.5137347565203765, 3.5285468420283195, 3.625267044862583, 6.095240161970809, 1.6017200357227415, -4.3859014673196475, 3.7862745119748826, 6.407278498506036, 4.285250512877829, 5.050090073137498, 2.7048408425661714, 5.049697977416516, 4.489854750696926, 3.9369977120515443, 4.355036970565822, 4.833690796701913, 4.4983580203973625, 4.430491520641624, 4.510155476816935, 2.3753233191324856, 5.192926181639923, 2.786136445443181, 4.450384187825943, 3.91221362367852, 3.8995929168466783, 4.3235640053530755, 6.479685121068593, 4.295667847545808, 3.249328820219601, -2.910642459749989, 3.9345538027172613, 3.321249955489108, 4.42038718121895, 3.241347042110334, 3.7910736625746058, 3.812464191285273, 3.223320286480204, 3.9780449868122947, 3.780329035033368, 4.418209608419128, 4.3498591320525035, 4.617495244036999, 4.51826375459129, 4.793148578684118, 3.7515368738961627, 3.331949038397792, 4.255772859144144, 4.415887661876979, 4.222669660846554, 4.131969791098057, 5.980594866047354, 2.3533060337008194, 1.715872426780643, 4.982597109903891, 4.660089109672918, 2.318595485726718, 4.907495772185207, 2.3197707996273538, 4.013214588157069, 4.0256453828273475, 5.099923302753188, 3.8090732017619744, 4.0235872489837865, 3.992920440994986, 5.043102183245668, 4.563600800556426, 5.080275462971585, 5.034121466383538, 4.629162049478058, 4.547174473000458, 4.551716518934641, 3.65583082140819, 4.088057528254853, 4.757259264116531, 3.3053832560195517, 5.707311943667997, 6.215595767370381, 0.401326608048838, 6.633439788255143, 3.5961717575290923, 3.968696581597918, 6.181203176876082, 5.346647029993962, 5.0201939293551705, 3.628432554957094, 5.620435528444498, 3.720536501884711, 4.7809629627315555, 4.847044882661661, 3.8305623001610134, 3.7619454123048537, 4.697334954383562, 4.834126453222527, 4.6379375833769645, 3.307184604419069, 4.036879826842997, 3.11165896430241, 4.709920764663011, 4.368621979049179, 0.5530487544683057, 1.860008644259064, 5.163339275013443, 9.040734481029512, -1.662368629621893, 3.859264217913603, 6.116590922784574, 4.522713331344776, 3.5916697211667277, 5.852234985246745, 2.9968007750186985, 4.904323573484865, 4.677898830853981, 5.512661937208004, 4.71747391252167, 5.798729905329525, 4.748133703591009, 4.240356650792528, 3.9544789113163694, 4.705277205406545, 3.3794937402683174, 3.2561134005349364, 3.6131496017084523, 5.631157332866755, 2.4211241208036216, 7.616914627854759, 5.3870964037895535, -0.36207261890439274, 4.329514160624111, 5.243372622394055, 3.3050490037962557, 4.543353279418804, 4.263941219069254, 3.9517997002722347, 4.649628238382329, 3.864463964259022, 4.0008250566746115, 4.117515083736796, 3.761149087632751, 4.652229752320354, 4.017389356976402, 3.3584756602797983, 4.44581979447315, 3.6156403157997974, 3.6556641168153345, 4.901528597492634, 5.830741728087105, 3.1435606991601994, 4.943057604630718, 6.804095751832091, -1.2345500484544267, 4.013565971110711, 5.454006494790243, 3.1794620045590034, 4.465553107207978, 5.0387226946736785, 4.0161500379647554, 2.783046497236343, 3.7938108953311485, 4.814837311573457, 4.092334373609864, 4.257886496890198, 4.010950333573636, 4.744399457246074, 3.7631350668057673, 3.7228249401660083, 4.294743680634914, 3.3465365071547497, 4.1406598255759635, 5.238773261051152, 2.231152511870877, 0.03156379387101064, 3.3356137928170155, 3.3529232619991842, 0.7016879079875382, 6.003492711950064, 4.520843366223777, 3.218065663987876, 3.613780700170913, 5.787222461253272, 4.065721701074045, 3.9225184289410406, 4.169881112102135, 4.2556507172934595, 4.923238804887088, 4.574520708391531, 4.626986927060104, 4.1081515587144946, 3.4232420673410897, 3.347245248298188, 3.546107895069789, 4.6877785580807245, 3.8459051420512207, 5.333021638395711, 4.265506557884531, 4.912739177761379, 2.9599986269699223, 4.893981114565075, -1.2204733138671129, -3.556071887496688, 7.9362566616428545, 3.3081444485068787, 4.521747859910561, 2.5430547975756097, 3.92775600417404, 3.9741150836201706, 5.486584871790857, 4.56845509936085, 3.621813825883097, 4.097592050717407, 3.89705245138745, 4.520601481468907, 4.250608767475211, 4.271837109466776, 3.332588912096386, 4.874349497979992, 5.737716172625863, 3.717703911122524, 4.64091602526426, 3.0634567138501008, 2.2407872646977576, 4.922127736209819, -6.300441289125445, 2.5441205224744676, 2.6731157014680993, 5.0805134176228615, 3.456491594536029, 2.730098812390125, 4.495454499708949, 3.049561484063496, 4.2138757770153275, 4.923241490331193, 4.840837359768099, 4.000022661073293, 4.2674928947602355, 4.161272597197545, 3.662885999181402, 3.278283502219493, 4.985675417372251, 4.359614339524986, 4.588843584248583, 3.8939389170964707, 1.9483870438542386, 4.7385295638198315, 3.530844880323647, 7.429914855246058, 7.1936514101665505, 4.211266881739588, 4.156518539455353, 0.812225679253458, 2.3600132534146203, 5.356393201555374, 4.621879063124901, 3.511237189696751, 4.582252461824915, 4.132292373306472, 3.231573970753295, 2.9718966183237896, 4.073068463720519, 4.331297474982888, 4.628596959119474, 4.1964130754946956, 3.7111336765116514, 4.4331708535389, 5.463244791241277, 4.4781359135406005, 5.219519496173422, 3.673815553433905, 4.836600863771065, 4.111871243880408, 2.2786738910728612, 0.9385453111585838]	
	QL=[1.9846423082175553, -4.27237485045607, 2.9209397192530218, 0.23901061661276835, 4.1451325829369425, 2.7765637641161054, 4.798337551899745, 4.090189864097207, 5.807822548099488, 0.6759193638680775, 2.1043821634375504, 3.0932190092146876, 1.6510325537575061, 5.102269904658911, 2.8055067232155944, 3.4054052185690598, 3.143735373443447, 3.247149118882241, 4.226096022651616, 4.017238888966018, 4.296178034828105, 3.3708720060588555, 5.273153515667265, 4.027383693930478, 2.7837614566657654, -2.7446107403243936, 6.579518603791763, -1.3806712454671106, -3.3828720058958095, 5.222141908579049, 2.4652493842241303, 2.6914858177741547, 3.8684753968453944, 0.5528549222412209, 3.803627145553338, 2.423692660561341, 3.769469611542638, 4.073701216439283, 3.461126422067803, 4.506027498866512, 4.478050180797772, 2.8326448855421766, 3.6449940031379704, 3.9581850670369514, 3.762985403760975, 4.736061667314849, 3.8413356558415175, 2.9057753350598365, 2.5866996886800253, 1.2499932129041051, 5.565612388233219, 7.369553778803575, 2.5108140094327194, 1.038703656551954, 6.935938744449103, 3.8194158326195584, 3.958803839462541, 4.115450116516178, 2.0566638390036105, 4.2654214453016435, 3.1658158537221057, 3.2474682097401684, 3.9689812220597176, 4.1464916679603565, 3.3494793506476155, 3.1687336760152967, 2.84716360516987, 3.417730262539673, 3.98659416447209, 4.195578034750328, 4.389107686285024, 4.070795754615264, 3.298753030123726, 2.9713658204450537, 4.6307812862163, 4.6220653051402465, 0.18909173245141364, -11.538461538461538, -2.7211516651281578, 3.6102493654981997, 7.227642668649931, 5.395297452212589, 5.435519783543233, 2.120737779937237, 3.6411381373343326, 3.6046417743619217, 3.033695453181342, 3.4675997580276947, 4.294482114867898, 3.091581047517478, 2.7321856473337527, 3.35463065705479, 3.96998529400728, 3.3250366010279295, 3.782665884442578, 2.3812246162473536, 2.715134698273742, -0.5032335156402948, 4.879781192121056, 5.420334807646466, 1.873736175277979, 0.48596794095921414, 1.321541456369732, 6.147689993373478, 4.62483675136393, 4.842809610047639, 1.3190706974796138, 2.231398610820271, 3.967844089484881, 3.140391194081461, 3.637371605787492, 4.957636251552693, 3.395932717049569, 3.5265712927380055, 3.60278087297794, 4.121490342243349, 3.582485235563362, 3.890007148342072, 3.850156797507039, 4.322933262285733, 3.0771857197241315, 2.086368970167135, -0.3430798195907305, -13.986347262105646, 4.441400717440498, 1.1990102684883457, 1.0975886533793495, 4.843118213303763, 3.620393827285812, 4.780678162090116, 1.8552851693046484, 4.9233547040886085, 4.427457873878327, 3.932605871486697, 3.6985028036222167, 4.567072357863565, 3.7546516936167404, 3.1622373602269693, 3.957687122000151, 4.491440742115897, 5.295904465731719, 3.5024930071929097, 3.9454816242649473, 2.777311160052111, 3.3381393267690385, 0.29865363575980375, 5.578760904141408, 8.16227894014101, 5.8055679776361755, 6.4982146792594095, 0.7776517808736667, 4.141241472268285, 3.3617560360398655, 6.328651264917097, 1.189177395049883, 1.0893646471133587, 2.6889555130367864, 2.9419620262339423, 4.385893339095923, 3.9168644186050225, 3.6750845262132663, 1.8268105044787286, 3.9090803723173053, 3.9973397044921084, 3.3102942098943333, 4.235416700250735, 4.115820146090492, 3.983713857394626, 2.8922664634863366, 2.428112758337167, -6.091804597446955, 2.327527816602306, 3.821050141462961, -8.043497445491775, 6.020559165076523, 3.4388158636015134, 4.699651963494636, 4.257531993366959, 2.645612278293735, 2.701254092874708, 3.4138622555722358, 3.4099931495912172, 4.635973722413486, 3.6077658489373867, 3.3875084244428075, 4.4868537411303215, 3.160533744259457, 3.6780244954593275, 3.17153055482936, 4.461843909230277, 3.345540638428968, 4.339031853997374, 1.5667766858831325, 0.9993688600946357, 4.503984691715987, 1.414028528739306, 3.2295013096643577, 3.735491097567574, -0.1427763031502618, 6.624229746991752, 4.632692971384544, 3.201450947152131, 0.005839157962333574, 3.6340607116814083, 2.4856504023472508, 3.04783486056972, 3.462359373367896, 3.917776295847741, 2.2393489097618207, 3.084429132583318, 4.708593101642423, 3.6029248324441987, 4.226228075189739, 3.8608012682916266, 4.437138105588301, 4.363807502210131, 2.2412762662385934, 1.0625313169139143, 3.143170054679733, 4.148187313765309, 3.025801208373627, 6.022776069331241, 0.8456608587462968, 3.141077444894021, 4.39535799846123, 4.904043197734897, 2.8346838156858887, 2.638587660053638, 3.603814792026173, 4.633039314918679, 3.1164170486502307, 4.227697574006318, 4.352125038177154, 3.254253575641225, 4.500571287230966, 3.9990630044196207, 2.8206014936012265, 3.4195771293178168, 3.3471328067020862, 2.5691818106040527, 3.1693073749519294, 4.618808983847609, 4.725987499404324, 2.68523540540744, 3.4478273367245396, -3.0183668059005875, 5.5623116752228805, 1.5213650117666788, 5.345995803953071, 3.127538466589826, 0.8139471310214063, 2.564261566900099, 3.3765414761938684, 1.5313594524888081, 3.449265399273671, 4.554824513795961, 3.4337334344651325, 3.2322056770636793, 4.605693829964453, 3.3974202928937176, 3.973391255672196, 3.434421411132245, 3.639430008452427, 4.15750267082944, 3.1077726562487142, 2.400827869774789, -0.7326270622715353, 5.204269624976112, 3.738915759037023, 0.2409015381972579, 7.244433927123384, 4.290468882411006, 3.2952828138843753, 3.3542945293356885, 3.9434884386940294, 1.0594253696940514, 2.7221155368298047, 3.62697424291608, 3.5088170390302365, 3.6809515860900617, 3.2362724652676556, 3.930188816749988, 3.804140076296032, 3.737576317872371, 3.7148095008652464, 4.094688855853939, 4.007877461456417, 3.926017629756201, 2.7368941225049106, 3.8827943355135774, 4.011810948390153, 3.7020681406046383, 2.144860540794735, 5.938800877464975, 5.452269005658477]
	plt.plot(QL,"b-",label='QL')
	plt.plot(DQN,"g-",label='DQN')
	plt.xlabel("hours")
	plt.ylabel("unit profit")
	plt.legend()
	plt.savefig('realtime.jpg', dpi=600, bbox_inches='tight')
	plt.show()

def draw_steps():
	x=[3,4,5,6,7,8]
	DQN=[2.8, 3.0036505, 3.61662, 3.8769, 4.046, 4.067745]
	#QL=[2.814, 2.927, 2.9881, 3.1456, 3.1844, 3.3481]
	QL2=[2.8, 2.87, 3.0222, 3.18247, 3.24815, 3.422]
	plt.plot(x,QL2,"b*-",label='QL')
	plt.plot(x,DQN,"go-",label='DQN')
	plt.xlabel("window size")
	plt.ylabel("unit profit")
	plt.legend()
	plt.savefig('steps.jpg', dpi=600, bbox_inches='tight')
	plt.show()

draw_steps()

#4/8: QL, DQL done, traffic range 2~50, for 0.3, revenue=0.6~15*5, for 1.3, revenue=1~25*5
#4/9: 跑圖完成