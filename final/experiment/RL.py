from keras.layers import Flatten, Dense, Activation
from statsmodels.tsa import arima_model
from keras.models import Sequential
from math import log2
import matplotlib.pyplot as plt
import numpy as np
import pickle

#len 302, max63
traffic=[29, 32, 39, 43, 50, 38, 38, 22, 12, 6, 3, 2, 3, 3, 7, 12, 15, 20, 28, 26, 33, 39, 36, 44, 30, 36, 41, 50, 48, 45, 32, 22, 12, 7, 4, 2, 1, 3, 7, 13, 25, 30, 28, 37, 39, 42, 47, 38, 32, 43, 45, 44, 49, 51, 42, 31, 19, 9, 5, 3, 2, 3, 6, 13, 19, 27, 27, 32, 43, 47, 55, 46, 35, 36, 39, 43, 38, 46, 37, 29, 23, 15, 6, 2, 1, 2, 4, 6, 13, 18, 26, 35, 37, 37, 36, 43, 39, 37, 48, 43, 43, 40, 35, 31, 21, 14, 6, 3, 2, 2, 3, 7, 11, 17, 25, 34, 40, 41, 43, 38, 26, 32, 41, 36, 43, 52, 39, 28, 20, 13, 6, 4, 3, 3, 7, 17, 24, 26, 37, 34, 39, 38, 46, 44, 37, 38, 47, 48, 52, 59, 46, 30, 16, 9, 3, 2, 3, 3, 6, 16, 19, 23, 26, 32, 33, 39, 44, 43, 33, 41, 42, 39, 51, 57, 44, 28, 20, 10, 5, 2, 1, 3, 6, 12, 23, 28, 27, 34, 35, 48, 50, 49, 36, 44, 45, 44, 49, 51, 48, 32, 20, 12, 5, 4, 2, 3, 6, 15, 19, 19, 33, 33, 33, 43, 46, 39, 35, 42, 48, 47, 51, 63, 50, 35, 24, 14, 6, 3, 2, 2, 6, 14, 22, 29, 26, 33, 42, 48, 48, 42, 37, 41, 41, 38, 41, 40, 33, 26, 22, 12, 5, 3, 1, 2, 3, 9, 14, 20, 22, 29, 33, 35, 38, 41, 35, 38, 38, 42, 42, 42, 36, 31, 24, 17, 9, 5, 4, 3, 3, 3, 10, 16, 21, 29, 33, 39, 42, 39, 32, 46, 49, 52, 52, 57, 45, 32, 20, 10, 3, 4, 3, 2]

#given last l time slots的l
history=6
#number of 對應到10%, 20%...100%
actions=10
#ε-greedy的初始值
epsilon=1
#discount factor
gamma=0.9

MEC=1
B=1
N=1e-10
F=100

#upper bound of subscription level
nu=2.675
Q=dict()

#當前使用在realtime offloading的algorithm
Realtime='SS'
#要重複幾次取平均
num=1

#this function generate a set of tasks with specific requirements
def gen_task():
	tasks=dict()
	for i in range(users):
		buf=dict()
		#input data size unit: Megabit
		buf['a']=np.random.uniform(100,1000)/1000
		#workload (required CPU cycle)
		buf['d']=np.random.uniform(1000,2000)/1000
		#computing capacity of local device unit: GHz
		buf['fl']=np.random.uniform(1,2)
		#delay requirment unit: sec
		buf['Tm']=np.random.uniform(0.5,1.5)
		#subscription level
		buf['pri']=np.random.uniform(0.5,1)
		#7.5跟uniform(4,10)是用得意的參數自己手動算的值
		buf['SINR']=(10**np.random.uniform(4,10))*7.5/N
		tasks[i]=buf
	return tasks

#給定t-1的slice scale與現在打算要租的scale, 計算最後的profit
def cal_profit(users, current, action, method):
	global F
	#在這個slice scale下每個MEC的算力 (租100%是140)
	F=140*(action+1)/10

	tasks=gen_task(users)
	
	#看realtime的method指定甚麼 並計算用此方法獲得的平均utility
	if method=='SS':
		QoS=caltech(tasks, iterative(tasks))
	elif method=='greedy':
		QoS=caltech(tasks, greedy(tasks))
	elif method=='PSO':
		QoS=caltech(tasks, PSO(tasks))
	elif method=='GA':
		QoS=caltech(tasks, GA_x(tasks))
	elif method=='FLE':
		QoS=caltech(tasks, [0]*len(tasks))
	elif method=='FRE':
		QoS=caltech(tasks, [1]*len(tasks))

	revenue=users*QoS*nu

	#如果想要租的scale跟當前的scale不一樣 則有operation cost
	if current!=action:
		cost=(abs(current-action)+2)*1.5+action*3
	#單純resource cost
	else:
		cost=action*3

	#profit
	return revenue-cost

#給定t-1的slice scale與現在打算要租的scale, 計算cost
def cal_cost(users, current, action, method):
	global F
	#在這個slice scale下每個MEC的算力 (租100%是140)
	F=140*(action+1)/10

	#如果想要租的scale跟當前的scale不一樣 則有operation cost
	if current!=action:
		cost=(abs(current-action)+2)*1.5+action*3
	#單純resource cost
	else:
		cost=action*3

	return cost

#給定t-1的slice scale與現在打算要租的scale, 計算revenue
def cal_revenue(users, current, action, method):
	global F
	#在這個slice scale下每個MEC的算力 (租100%是140)
	F=140*(action+1)/10

	tasks=gen_task(users)
	
	#看realtime的method指定甚麼 並計算用此方法獲得的平均utility
	if method=='SS':
		QoS=caltech(tasks, iterative(tasks))
	elif method=='greedy':
		QoS=caltech(tasks, greedy(tasks))
	elif method=='PSO':
		QoS=caltech(tasks, PSO(tasks))
	elif method=='GA':
		QoS=caltech(tasks, GA_x(tasks))
	elif method=='FLE':
		QoS=caltech(tasks, [0]*len(tasks))
	elif method=='FRE':
		QoS=caltech(tasks, [1]*len(tasks))

	revenue=users*QoS*nu

	return revenue

#this function compute the sum of utility of users given the offloading ratio xi
def caltech(tasks, xi):
	#xi為陣列 包含每個user的offloading ratio

	#紀錄utility的變數
	reward=0
	#按照順序分配MEC (node association)
	en=list()
	for i in range(users):
		en.append(i%MEC+1)

	#存每個user bandwidt allocation bi與computing capacity fi的變數
	b=[0]*users
	f=[0]*users

	#暫存計算optimal 公式中分母的變數
	ss=[0]*(MEC+1)
	for k,v in tasks.items():
		#compute sum of sqrt (就是optimal結果公式中的分母)
		ss[0]+=(xi[k]*v['a']*v['pri']/(v['Tm']*log2(1+v['SINR'])) )**0.5
		ss[en[k]]+=(xi[k]*v['d']*v['pri']/v['Tm'])**0.5

	for k,v in tasks.items():
		#計算 bi 就是user i optimal的bandwidth allocation
		if ss[0]>0:
			b[k]=((xi[k]*v['a']*v['pri']/(v['Tm']*log2(1+v['SINR'])) )**0.5)*B/ss[0]
		#計算 fi 就是user i就是optimal的算力allocation
		if ss[en[k]]>0:
			f[k]=((xi[k]*v['d']*v['pri']/v['Tm'])**0.5)*F/ss[en[k]]

	#算每個task的utility
	for k,v in tasks.items():
		#如果offloading ratio>0
		if xi[k]>0:
			t=max( (1-xi[k])*v['d']/v['fl'], xi[k]*v['a']/b[k]/log2(1+v['SINR']) + xi[k]*v['d']/f[k] )
		else:
			t=v['d']/v['fl']

		#如果在delay requirement 內
		if t<v['Tm']:
			reward+=v['pri']*(1-t/(v['Tm']) )
		#否則一個定值的penalty
		else:
			reward-=v['pri']*0.5

	#回傳平均的utility
	return reward/users

#this function is the proposed AO-based algorithm, which will return the vector of offloading ratio xi
def iterative(tasks):

	#decision variable, 存每個user offloading ratio xi, bandwidt allocation bi與computing capacity fi的變數
	xi=list()
	b=[0]*users
	f=[0]*users

	#按照順序分配MEC (node association)
	en=list()
	for i in range(users):
		en.append(i%MEC+1)

	#initialize xi by eq (37)
	for e in tasks.values():
		xi.append( 1-min(1, e['Tm']*e['fl']/e['d']) )

	#暫存計算optimal 公式中分母的變數
	ss=[0]*(MEC+1)
	for k,v in tasks.items():
		#compute sum of sqrt (就是optimal結果公式中的分母)
		ss[0]+=(v['a']*v['pri']/(v['Tm']*log2(1+v['SINR'])) )**0.5
		ss[en[k]]+=(v['d']*v['pri']/v['Tm'])**0.5

	for k,v in tasks.items():
		#計算 bi 就是user i optimal的bandwidth allocation
		if ss[0]>0:
			b[k]=(((v['a']*v['pri']/(v['Tm']*log2(1+v['SINR'])) )**0.5)*B/ss[0])
		#計算 fi 就是user i optimal的算力 allocation
		if ss[en[k]]!=0:
			f[k]=((v['d']*v['pri']/v['Tm'])**0.5)*F/ss[en[k]]

	i=0
	while i<100:
		#update x by eq (21)
		for k,v in tasks.items():
			xi[k]=v['d']/v['fl']/( v['a']/(b[k]*log2(1+v['SINR'])) + v['d']/f[k] + v['d']/v['fl'] )

		#暫存計算optimal 公式中分母的變數
		ss=[0]*(MEC+1)
		for k,v in tasks.items():
			#compute sum of sqrt (就是optimal結果公式中的分母)
			ss[0]+=(xi[k]*v['a']*v['pri']/(v['Tm']*log2(1+v['SINR'])) )**0.5
			ss[en[k]]+=(xi[k]*v['d']*v['pri']/v['Tm'])**0.5

		for k,v in tasks.items():
			#計算 bi 就是user i optimal的bandwidth allocation
			if ss[0]>0:
				b[k]=(((xi[k]*v['a']*v['pri']/(v['Tm']*log2(1+v['SINR'])) )**0.5)*B/ss[0])
			#計算 fi 就是user i optimal的算力 allocation
			if ss[en[k]]!=0:
				f[k]=((xi[k]*v['d']*v['pri']/v['Tm'])**0.5)*F/ss[en[k]]

		i+=1

	#回傳user的offloading ratio陣列
	return xi

#one of the compared scheme: greedy
def greedy(tasks):

	#user的offloading ratio陣列
	xi=[0]*users
	#對task做sort
	tasks_s=sorted(tasks.items(), key=lambda kv: kv[1]['pri']/(kv[1]['d']/kv[1]['Tm']))

	#從sort完的陣列開始一個一個確認要不要offload
	for e in tasks_s:
		buf=xi.copy()
		buf[e[0]]=1
		#如果offload他的話整體utility會比沒有offload他高
		if caltech(tasks, buf)>caltech(tasks, xi):
			#就全offload這個task (xi=1)
			xi=buf
		else:
			break

	#回傳user的offloading ratio陣列
	return xi

#one of the compared scheme: PSO
def PSO(tasks):

	#particle的數量
	particles=200
	#solution vector of particles, 每個particle代表xi陣列的一組解(particle 第i個elemet是第i個user的offloading ratio)
	decision=list()
	#存每個particle每個維度(方向)的速度
	velocity=list()

	#initialize particles, 從第i個particle開始
	for i in range(particles):
		decision.append([])
		velocity.append([])

		#從第j個element開始  每個element是該user的offloading ratio
		for j in range(users):
			#以一定機率在產生非0的offloading ratio 並產生0.5到-0.5的速度
			if np.random.rand()<10/users:
				decision[i].append(np.random.rand())
				velocity[i].append(np.random.uniform(0.5,-0.5))
			else:
				decision[i].append(0)
				velocity[i].append(0)

	#紀錄每個粒子的歷史最大值
	history=list()
	for i in range(particles):
		history.append([decision[i],-100])
	glob_best=[decision[-1],-100]
	
	#如果連續10次最佳解都一樣則收斂
	cou=0
	while cou<10:
		#cal fitness & update
		best=glob_best[1]
		for i in range(particles):

			value=caltech(tasks, decision[i])
			if value > history[i][1]:
				history[i][0]=decision[i]
				history[i][1]=value
			if value > glob_best[1]:
				glob_best[0]=decision[i]
				glob_best[1]=value

		if best==glob_best[1]:
			cou+=1
		else:
			cou=0

		#update velocity & position
		for i in range(particles):
			for j in range(users):
				velocity[i][j]=velocity[i][j]+0.001*(history[i][0][j]-decision[i][j])+0.001*(glob_best[0][j]-decision[i][j])
				decision[i][j]+=velocity[i][j]
				if decision[i][j]>1:
					decision[i][j]=1
				if decision[i][j]<0:
					decision[i][j]=0

	#回傳最好的粒子(解) (xi, vector offloading ratio)
	return glob_best[0]

#one of the compared scheme: GA
def GA_x(tasks):

	#存母群體的變數
	Maternal=list()
	table=list()

	#產生size個初始染色體
	def generate(size):
		for a in range(size):
			xi=list()
			#決定一個染色體中每個element的值
			for b in range(users):
				#以一定機率產生非0的offloading ratio
				if np.random.rand()<15/users:
					xi.append(np.random.rand())
				else:
					xi.append(0)

			#將此染色體加到母群體中
			table.append(xi)
			Maternal.append([xi, caltech(tasks, xi)])

	#交配
	def crossover(pairs, rank):
		#存要交配的對象的變數(父母)
		parent=list()

		#選出2*pair個染色體當交配對象
		for e in range(2*pairs):
			#用輪盤法選
			a=np.random.rand()
			if a<rank[0][1]:
				parent.append(rank[0][0])
			else:
				accu=rank[0][1]
				for i in range(1, len(rank)):
					if a>accu and a<accu+rank[i][1]:
						parent.append(rank[i][0])
						break
					else:
						accu+=rank[i][1]

		#從選出來的交配對象中每次抽兩個出來交配直到袋子內的染色體都被抽完
		while len(parent)>2:
			#父母a跟b
			a=parent.pop()
			b=parent.pop()
			#多點交配 (從開始觸到結束處整段交換)
			start=np.random.randint(len(a))
			end=np.random.randint(start,len(a))

			#a跟b生的兩個叫aa跟bb
			aa,bb=list(),list()
			for j in range(users):
				if j not in range(start, end):
					aa.append(a[j])
					bb.append(b[j])
				else:
					aa.append(b[j])	
					bb.append(a[j])

			#新增aa, bb到母群體
			if aa not in table:
				table.append(aa)
				Maternal.append([aa, caltech(tasks,aa)])
			if bb not in table:
				table.append(bb)
				Maternal.append([bb, caltech(tasks,bb)])

			#以一定機率突變
			if np.random.rand()<0.16:
				muta1, muta2=list(), list()
				tar=np.random.randint(len(aa))
				for i in range(len(aa)):
					if i!=tar:
						muta1.append(aa[i])
						muta2.append(bb[i])
					else:
						muta1.append(np.random.rand())
						muta2.append(np.random.rand())
				if muta1 not in table:
					table.append(muta1)
					Maternal.append([muta1, caltech(tasks,muta1)])
				if muta2 not in table:
					table.append(muta2)
					Maternal.append([muta2, caltech(tasks,muta2)])

		#如果母群體數量超過一定 則刪掉排名倒數的染色體
		if len(Maternal)>len(rank):
			for i in range(1, len(Maternal)-len(rank)+1):
				Maternal.pop(Maternal.index(rank[-i]))

	generate(200)
	
	#如果連續10次最好的染色體都一樣則收斂
	cou=0
	st1=0
	while 1:
		total=0
		Roulette=Maternal.copy()
		for e in Roulette:
			total+=e[1]
		for i in range(len(Roulette)):
			Roulette[i][1]/=total
		crossover(20, sorted(Roulette, key=lambda kv: -kv[1]))

		if sorted(Maternal, key=lambda kv: -kv[1])[0][1]-st1<0.0001:
			cou+=1
		else:
			st1=sorted(Maternal, key=lambda kv: -kv[1])[0][1]
			cou=0
		if cou>10:
			break
	xi=sorted(Maternal, key=lambda kv: -kv[1])[0][0]

	#回傳最好的染色體(vector of offloading ratio)
	return xi

#初始化Q table
def init():
	for i in range(history, len(traffic)):
		for a in range(actions):
			Q[str([a]+traffic[i-history:i])]=dict()
			for b in range(actions):
				Q[str([a]+traffic[i-history:i])][b]=0

#DRL, DQN
def DQL():
	#Q table
	global Q
	#存training data的變數
	exp_x, exp_y=list(), list()

	#construct DNN
	DNN=Sequential()
	#input dimension
	DNN.add(Dense(64, input_shape=(history+1,)) )
	#hidden
	DNN.add(Dense(64, activation="relu"))
	#hidden
	DNN.add(Dense(64, activation="relu"))
	#hidden
	DNN.add(Dense(64, activation="relu"))
	#output
	DNN.add(Dense(actions))
	DNN.compile(loss='mse', optimizer='adam', metrics=['mse'])
	DNN.summary()

	#放agent 去explore environment 一個episode
	def play(episode):
		global epsilon
		#現在的slice決策
		current=0

		#從dataset的第一個time slot到倒數第二個 (共300個time slot)
		for i in range(history, len(traffic)-2):
			#現在系統的state
			state=[current]+traffic[i-history:i]
			exp_x.append(state)

			#以epsilon-greedy決定agent的action
			if np.random.rand()<epsilon:
				#隨便選一個
				action=np.random.randint(actions)

			else:
				#先用Q table 探索200個epsidoe
				if episode<200:
					#以下是從Q table中選一個Q最大的action
					best, action=0, 0
					for e in Q[str(state)]:
						if Q[str(state)][e]>best:
							best=Q[str(state)][e]
							action=e
					if best==0:
						action=np.random.randint(actions)
				else:
					#直接以DNN output中最大的當action
					action=DNN.predict(np.array([state]))[0]
					action=list(action).index(max(action))

			#更新epsilon的值
			epsilon-=(1-0.01)/10000

			#state 切換到做完action的state
			nextt=str([action]+traffic[i+1-history:i+1])

			#找下個state中Q值最大的action
			best, act=0,0
			for e in Q[nextt]:
				if Q[nextt][e]>best:
					best=Q[nextt][e]
					act=e

			#更新Q table
			Q[str(state)][action]=cal_profit(traffic[i+1], current, action, Realtime) + 0.8*cal_profit(traffic[i+1+1], action, act, Realtime)
			
			#以目前的Q table當作training data
			target_Q=list()
			for e in Q[str(state)]:
				target_Q.append(Q[str(state)][e])

			#存training data
			exp_y.append(target_Q)

			current=action

			#如果replay memory滿了
			if len(exp_x)>4096:
				exp_x.pop(0)
				exp_y.pop(0)

		#開始訓練
		if episode>130:
			DNN.fit([exp_x], [exp_y], epochs=5, batch_size=1024)
		else:
			DNN.fit([exp_x], [exp_y], epochs=1, batch_size=1024)


	#放現在的agent進去玩, 測量performance
	def exam(episode):
		profit=list()
		current=0

		#從dataset的第一個time slot到倒數第二個 (共300個time slot)
		for i in range(history, len(traffic)-1):
			state=[current]+traffic[i-history:i]

			#直接以DNN output中最大的當action
			action=DNN.predict(np.array([state]))[0]
			action=list(action).index(max(action))

			#計算profit並存
			for e in range(num):
				profit.append(cal_profit(traffic[i+1], current, action, Realtime)/traffic[i+1]/num)

			current=action

		return sum(profit)/len(traffic)

	#最後用來看學完的agent的performance的函數, 需依照你想跑的圖做內容的修改, 如想看revenue 或cost則把那行的註解消掉
	def final():
		global Realtime
		profit=list()
		current=0

		for i in range(history, len(traffic)-1):
			state=[current]+traffic[i-history:i]

			action=DNN.predict(np.array([state]))[0]
			action=list(action).index(max(action))

			profit.append(cal_profit(traffic[i+1], current, action, Realtime)/traffic[i+1])
			#profit.append(cal_revenue(traffic[i+1], current, action, Realtime)/traffic[i+1])
			#profit.append(cal_cost(traffic[i+1], current, action, Realtime)/traffic[i+1])
			current=action

		return profit

	#主要執行的地方(call其他函數)
	def main():

		init()
		#作圖用的變數
		x, result=list(), list()
		episode=0

		while episode<400:
			play(episode)
			print(episode)
			#如要跑realtime的learning curve, 則把以下註解消掉
			#test revenue
			'''if episode%5==0:
				x.append(episode)
				result.append(exam(episode))'''
			
			episode+=1

		#顯示學完後得到在300個system time slot的實驗中的平均profit
		print(final())

		#如要跑realtime的learning curve, 則把以下註解消掉
		'''print(result)
		plt.plot(x,result,"go-",label='DQN')
		plt.xlabel("epochs")
		plt.ylabel("unit_profit")
		plt.legend()
		plt.savefig('unit_profit_DQN.jpg', dpi=600, bbox_inches='tight')
		plt.show()'''

	main()

	'''with open('train_x.pickle', 'wb') as f:
		pickle.dump(exp_x, f)
	with open('train_y.pickle', 'wb') as f:
		pickle.dump(exp_y, f)'''

	#如果要用預先準備的資料集做做DNN對不同neuron layer參數圖 則把main註解掉, 並把下面註解消掉, 讓他直接train
	#with open('train_x.pickle', 'rb') as f:
	#	x=pickle.load(f)
	#with open('train_y.pickle', 'rb') as f:
	#	y=pickle.load(f)

	#DNN.fit([x], [y], epochs=1000, batch_size=4096)

#compared scheme: 傳統QL
def QL():
	global Q

	#一個episode
	def play(episode):
		global epsilon
		#現在的slice決策
		current=0
		#從dataset的第一個time slot到倒數第二個 (共300個time slot)

		for i in range(history, len(traffic)-2):
			#現在系統的state
			state=str([current]+traffic[i-history:i])

			#以epsilon-greedy決定agent的action
			if np.random.rand()<epsilon:
				#隨便選一個
				action=np.random.randint(actions)

			else:
				#以下是從Q table中選一個Q最大的action
				best, action=0, 0
				for e in Q[state]:
					if Q[state][e]>best:
						best=Q[state][e]
						action=e
				if best==0:
					action=np.random.randint(actions)

			#更新epsilon的值
			epsilon-=(1-0.01)/10000

			#更新Q table
			Q[state][action]=(cal_profit(traffic[i+1], current, action, Realtime) + Q[state][action]*episode )/(episode+1)
			current=action

	#放現在的agent進去玩, 測量performance
	def exam():
		profit=list()
		current=0

		#從dataset的第一個time slot到倒數第二個 (共300個time slot)
		for i in range(history, len(traffic)-1):
			state=str([current]+traffic[i-history:i])
			best, action= 0, 0

			#選現在state中Q值最大的action
			for e in Q[state]:
				if Q[state][e]>best:
					best=Q[state][e]
					action=e
			if best==0:
				action=np.random.randint(actions)

			#計算profit並存
			for e in range(num):
				profit.append(cal_profit(traffic[i+1], current, action, Realtime)/traffic[i+1]/num)
			current=action

		return sum(profit)/len(traffic)

	#最後用來看學完的agent的performance的函數, 需依照你想跑的圖做內容的修改, 如想看revenue 或cost則把那行的註解消掉
	def final():
		global Realtime
		profit=list()
		current=0

		#跑300個system time slot
		for i in range(history, len(traffic)-1):
			state=str([current]+traffic[i-history:i])
			best, action= 0, 0
			#選目前最好的action
			for e in Q[state]:
				if Q[state][e]>best:
					best=Q[state][e]
					action=e
			#如果都是0 就隨機
			if best==0:
				action=np.random.randint(actions)

			profit.append(cal_profit(traffic[i+1], current, action, Realtime)/traffic[i+1])
			profit.append(cal_revenue(traffic[i+1], current, action, Realtime)/traffic[i+1])
			profit.append(cal_cost(traffic[i+1], current, action, Realtime)/traffic[i+1])
			current=action

		return profit

	#主要執行的地方(call其他函數)
	def main():
		init()
		x, result=list(), list()
		episode=0

		while episode<500:
			play(episode)
			print(episode)
			#如要跑realtime的learning curve, 則把以下註解消掉
			#test revenue
			'''if episode%5==0:
				x.append(episode)
				result.append(exam())'''
			episode+=1

		#顯示學完後得到在300個system time slot的實驗中的平均profit
		print(final())

		#如要跑realtime的learning curve, 則把以下註解消掉
		'''print(result)
		plt.plot(x,result,"go-",label='QL')
		plt.plot(result,"go-",label='QL')
		plt.xlabel("epochs")
		plt.xlabel("Time (hours)")
		plt.ylabel("unit_profit")
		plt.legend()
		plt.savefig('unit_profit_QL.jpg', dpi=600, bbox_inches='tight')
		plt.show()'''

	main()

#compared scheme: ARIMA
def ARIMA():
	result=list()

	#定義ARIMA模型, 他會自己算參數
	model=arima_model.ARIMA(traffic, order=(history, 0, 0))
	model=model.fit(disp=-1)
	current=0
	for a in range(1):
		profit=list()
		for i in range(history, len(traffic)-2):
			#直接以現在預測的request除以資料庫中一個time slot requests數的最大值並取整數去租slice
			action=max(int(model.predict(start=i, end=i)[0]*10/63), 1)
			#計算profit 並儲存
			for e in range(num):
				profit.append(cal_cost(traffic[i+1], current, action, Realtime)/traffic[i+1]/num)
			current=action
		print(a)
	
		#result.append(sum(profit))
		print(profit)
	'''plt.plot(profit,"go-",label='ARIMA')
	plt.xlabel("Time (hours)")
	plt.ylabel("unit_profit")
	plt.legend()
	plt.savefig('unit_profit_ARIMA.jpg', dpi=600, bbox_inches='tight')
	plt.show()'''
	#print(sum(profit)/len(traffic))

#畫不同learning alg的學習曲線
def draw_learning():
	#最後圖用的數據:
	DQN=[-0.02947138746008154, -0.05683746842319388, -0.5525725638070498, 0.19726149382152897, 0.22128530708781707, 0.3036037727047926, 0.34003872677132074, 0.41055310457342037, 0.39375725485001334, 0.42746250417960274, 0.4446070984764525, 0.46774300000356506, 0.4700197314653156, 0.46670118992580695, 0.4464238472852594, 0.4291272147434949, 0.44531463885560285, 0.42142406907586255, 0.42733233917109614, 0.45640205687050456, 0.4891127714576862, 0.48550703695527625, 0.504642538934418, 0.5006096831218133, 0.5224512252172634, 0.5086412865518086, 0.5347077795638928, 0.5140535884840597, 0.4924636492597764, 0.5004081853506781, 0.4924510359348624, 0.4580505186148501, 0.5329586114353333, 0.46274751206585246, 0.4648217289464002, 0.4750427168052179, 0.44906847099396824, 0.4944624493809005, 0.4663743932079875, 0.4944784744703979, 0.4878671131747708, 0.4777389792744734, 0.46703110512488444, 0.4679160781617393, 0.47190390994900056, 0.49022635757446037, 0.47877212548594034, 0.49376167325890397, 0.502886594206593, 0.49351181246024384, 0.5013959940240009, 0.5012530955848102, 0.5179581645488373, 0.4750897209806199, 0.4687792698219121, 0.45836566181916516, 0.47963627293614997, 0.47757115210858064, 0.484361702308153, 0.5075365425081606, 0.5111625624650642, 0.4937081219119487, 0.5019707314307763, 0.530140681175035, 0.5414122734196177, 0.5125975528275017, 0.517216592435981, 0.45390613936201024, 0.5218980920563163, 0.49605050684758395, 0.5053976354855446, 0.5005441828920113, 0.5206013307361418, 0.4963628082249401, 0.49353865738741076, 0.49535179079224934, 0.5091637014922838, 0.4542242539665891, 0.5192242927472188, 0.5108259981658186, 0.46165206035274386, 0.4880428028477109, 0.5068642042949494, 0.5108471292870296, 0.5121725550511879, 0.5123661737371689, 0.5147528184873763, 0.5119719556752771, 0.5164111630764838, 0.47016850994545695, 0.4961066341159421, 0.49359401568709027, 0.49591550269369283, 0.5109885625020177, 0.4826994566112737, 0.5053097463240623, 0.49694688664014564, 0.49899579937157, 0.4893054634245478, 0.5179297124922158]
	QL=[-0.4766196425382778, -0.418471020937314, -0.16706008478202927, 0.049206965648693986, 0.13193832434336358, 0.21603366329111975, 0.1266303926057101, 0.19176563180706313, 0.3542499022231033, 0.33085973161356286, 0.3214452209473416, 0.41765835412320035, 0.4353572513758351, 0.36045323640995836, 0.393989386689605, 0.3603785336641302, 0.3905742661756861, 0.4526806134919, 0.43721186626709535, 0.36945188280706187, 0.38974434926531437, 0.33151450645899155, 0.40320988681595904, 0.3816447418766746, 0.43615440072494477, 0.42686999252994073, 0.404845224846178, 0.40155735712552376, 0.46681968193140483, 0.4228293300003643, 0.38396543264855404, 0.4187120636645643, 0.42617364049518863, 0.45047809369701053, 0.3599664849087427, 0.48481374806284844, 0.3747897122738871, 0.41155829129070964, 0.4508932586662359, 0.40308882926166156, 0.38349170608998, 0.5452783024123172, 0.4516468007687859, 0.4089639171426346, 0.37841599448898144, 0.41973923178861017, 0.4533736995107233, 0.504196392513983, 0.38115314188135657, 0.47457231120015825, 0.43724443749292274, 0.4315485431778771, 0.4926139885456325, 0.47230222774163755, 0.3672956276985424, 0.44460117520997616, 0.4430498086732269, 0.47656137020789896, 0.5007724879027601, 0.45312281576381935, 0.38298850030431797, 0.4582303237895778, 0.38917972050167887, 0.3593023376617444, 0.4283066032405263, 0.3539809454201628, 0.4413710316303589, 0.39398465020761775, 0.3731257064707326, 0.48317639720131095, 0.4363929309310127, 0.38138892858949186, 0.4442178753599404, 0.45410484871093043, 0.5210105856005565, 0.4810066112278725, 0.4473920963323253, 0.32646953246433646, 0.4480160469899243, 0.42453121384459463, 0.46704570627860237, 0.37206469797062874, 0.3907840162099349, 0.49757067264992433, 0.2944314350829615, 0.4718117440710756, 0.4557667551452891, 0.28925126943433804, 0.36544885963534973, 0.4242225237116225, 0.37686810265200643, 0.35857898244344977, 0.40776926659003293, 0.3840355634477258, 0.5101597693634966, 0.32484278337190375, 0.4212630399091553, 0.43173761768924307, 0.3400797789585941, 0.40224423336247805]
	ARIMA=[0.3117096011976404, 0.32286397511110543, 0.3143966951546908, 0.31861849530784364, 0.3031687759813293, 0.30588246187874096, 0.325659679413659, 0.33356229375231966, 0.32287833186268444, 0.3268157526137328, 0.31808204863734524, 0.32225789428936824, 0.31474065978872956, 0.31749173611109055, 0.3164335350555755, 0.30646404554862594, 0.3313485193874643, 0.31083313434897153, 0.3053184366371134, 0.3186004435714726, 0.3177142204749605, 0.31870526506216557, 0.3242253019836564, 0.3250985926603929, 0.32030705181305824, 0.31693325311976234, 0.31896888896935366, 0.31396874321006885, 0.32280859661704236, 0.31009987779573417, 0.3075871791289287, 0.3249818971712715, 0.31956222861939165, 0.3247740354864155, 0.30885771508217336, 0.3073682334656556, 0.32315688778988066, 0.30638845182875335, 0.3203582872309403, 0.32273599468240083, 0.3108620667144283, 0.3252615318992971, 0.32010974587288205, 0.30993646684830606, 0.31825741300406346, 0.3180360850308953, 0.3142507253404223, 0.3213028478139136, 0.3117135667667383, 0.29476091571015095, 0.3244193203097283, 0.3043777108253898, 0.3180152628697461, 0.31003443809417364, 0.31170499092810316, 0.310888652492232, 0.31839079476295384, 0.32346579875538456, 0.30582101905618386, 0.3203811684019184, 0.30766303138183665, 0.3229853394115311, 0.31096759613034985, 0.30356641666660417, 0.3172505008880765, 0.3202600308757166, 0.3104094456438617, 0.3163369672369058, 0.3084144896581206, 0.32058160137074004, 0.31817269605826975, 0.3233259196199375, 0.30940670183768165, 0.3047358058677159, 0.32653985450378165, 0.31205085256079845, 0.324885214469499, 0.310824225603015, 0.3051556522013951, 0.3196246364000169, 0.30927920543035153, 0.3194376308509989, 0.31102655734662976, 0.31222030085906155, 0.3237088898841131, 0.32032887158826534, 0.32183849903313394, 0.3179086969166723, 0.29538582503414473, 0.3120381412831165, 0.32500015485568573, 0.30927347248139575, 0.315727817258248, 0.31590999267980574, 0.3159877096074667, 0.31444162043133167, 0.3264532168390842, 0.31583978954997216, 0.30466719508190016, 0.3188622406535381, 0.3133840697110469, 0.324420125069117, 0.3222870044250985, 0.3218078786076746, 0.3011665232558551, 0.31438371119035424, 0.3115937108418147, 0.310979118925928, 0.3030046695894398, 0.32039434954753104, 0.31810459270718583, 0.32044442670114076, 0.32175448842716337, 0.3209786169599622, 0.3102311165488405, 0.30213987717416557, 0.313084360908234, 0.309942744266132, 0.30793407772076625, 0.31822960143506884, 0.32013427583026116, 0.31455253170725517, 0.31936636646315847, 0.315154122415404, 0.3201567644921717, 0.30334877395682314, 0.31364403040387656, 0.30503574925544424, 0.3140660361126383, 0.31799242103027336, 0.3140086243251132, 0.3195195974556305, 0.3148721676231726, 0.31494408478021363, 0.3221847969763364, 0.31451196943149273, 0.30090310443411733, 0.3182113981230167, 0.3161304639312464, 0.313801984052321, 0.32906759824505055, 0.32060549729684296, 0.3181912210197938, 0.3117741063288359, 0.32538833333839023, 0.31390627530850007, 0.3171886547760013, 0.3136423220779508, 0.31755156601428053, 0.3111469965830456, 0.31751514089517363, 0.33309609472007473, 0.3124186105786821, 0.3035720229770647, 0.30399587550267365, 0.33187260606106134, 0.3343284169144628, 0.32168867401684925, 0.2998947775618604, 0.31347757892836264, 0.3210958191477514, 0.3097168787511478, 0.32019246690695263, 0.3125656716643883, 0.32582966298720895, 0.30809138696997423, 0.32955878384652093, 0.33427338486747676, 0.3108821780100311, 0.3152878758401053, 0.31607886250741396, 0.3124943290164423, 0.30861963040925683, 0.3139606881772754, 0.31656463772211946, 0.31375257168509607, 0.3068383926541184, 0.3150004007402577, 0.313866897478268, 0.3172769663868278, 0.31632001719271713, 0.30819008527149727, 0.3215132171553613, 0.3199235145715706, 0.3203927663528821, 0.31361286722109144, 0.307216041284007, 0.3184039450502066, 0.32290389552388954, 0.31836355746361794, 0.31729421949211883, 0.3132498197273864, 0.31932615220363625, 0.3179539667683698, 0.3357727113565297, 0.3082443661151783, 0.30686319324505235, 0.3163764804403333, 0.3188376792105408, 0.32067361699999936, 0.32327241791011097, 0.3180426757535356, 0.3178412684872404, 0.31983938758978087, 0.3116564196791503, 0.30897949107258227, 0.31832226859840795, 0.31839045475262967, 0.3221118550157479, 0.32070046478659087, 0.3126096347923299, 0.3138093357551052, 0.3043232526804324, 0.30614193473692336, 0.30761375851904077, 0.3270056929811684, 0.3161536798763092, 0.31136202341453695, 0.3183026456156524, 0.3153955331969885, 0.3162138956231482, 0.31529360698111786, 0.301127038122194, 0.30720577088549383, 0.31620283088911216, 0.31382942538838987, 0.3081249863853785, 0.32721642263274087, 0.32704415112723845, 0.3168513705055293, 0.33315915131010804, 0.31716445008656013, 0.30735600349382847, 0.3165852238730564, 0.31672010354654745, 0.32503917534312277, 0.316318867907688, 0.3151930770201662, 0.3180749524715866, 0.3167481787359923, 0.3164467386203189, 0.31797682357193774, 0.31793404517870416, 0.3199776873306021, 0.31942832717899894, 0.3279930817212918, 0.32754579149988633, 0.30558713984917407, 0.3138912944424589, 0.3219387784086422, 0.3199499068382127, 0.3202743532196087, 0.31140353787000447, 0.31522993131615273, 0.31804082011746265, 0.3158950100748705, 0.3144747001174527, 0.3071990289589227, 0.3196263079170522, 0.3151219282751391, 0.3196698207696861, 0.3221962600275228, 0.32099494273074153, 0.3096639700142581, 0.32538567022119447, 0.30840360237962927, 0.3161095339580458, 0.30966948400965577, 0.3079964874955253, 0.3213270833048752, 0.32331090348193775, 0.30146570680767437, 0.31889214858438636, 0.3267480985110465, 0.3122707702931759, 0.31806222400810463, 0.3023182926228376, 0.3085531836956639, 0.32296927241370466, 0.30573032497940333, 0.3224096822153854, 0.30733611935328675, 0.31701693050554924, 0.3082957706277956, 0.31293064568532636, 0.3250603478598613, 0.32097642721704805, 0.30349883060840976, 0.3255881980458519, 0.32838052827840686, 0.31604210146997136, 0.3144227124198211, 0.3058418224539598, 0.3130593395001476, 0.32190504548672927, 0.3067815612414471, 0.3196869113764251, 0.3158274552295649, 0.31036880785076026, 0.31029100551823857, 0.30403665597005636, 0.31051732262570886, 0.31805851200018276, 0.3085051828160828, 0.32205026958422817, 0.3063667397514432, 0.3053120581115875, 0.31632779708511227, 0.31774944631070473, 0.3173615879433042, 0.3095751522974998, 0.32386556604019406, 0.3093718742842092, 0.3240559161812831, 0.3169287252729091, 0.31652422149277587, 0.3141874967334606, 0.31543121917965594, 0.32258356341290934, 0.32110567745213947, 0.31617197655767554, 0.30721002742767256, 0.3058832741327847, 0.3156216033705598, 0.31396450513635515, 0.3195597515285299, 0.30961603013982286, 0.31934048439190715, 0.30149882901555325, 0.3217407762147607, 0.3155115153868045, 0.3230231160051113, 0.3203913654499389, 0.3065132078457293, 0.31665716418738965, 0.3135837136413665, 0.30142195856856135, 0.3299797858186538, 0.3158079119302853, 0.31632193195158187, 0.30726768864062604, 0.33154908539905903, 0.31517939865062317, 0.3123603254668188, 0.3141853138296109, 0.30980560869584967, 0.31473852034810496, 0.31682087497976136, 0.31569735039962704, 0.31939664992629424, 0.31355565246128425, 0.320139272725809, 0.3144200897921049, 0.3108768581600706, 0.3089555623241024, 0.31140865909979926, 0.3266295002196952, 0.32034948648051914, 0.31365679224659815, 0.32188893990590617, 0.3176190067496821, 0.3221553318703178, 0.32540492949359623, 0.3086399518265666, 0.3135679291898984, 0.31387890801571416, 0.3187220587322672, 0.31974602764211074, 0.31917621203886287, 0.3066501819594053, 0.30846598096186334, 0.3047912947497794, 0.32749538688934104, 0.30876205109732113, 0.3175930129288471, 0.3138315593920695, 0.32277525933266865, 0.2985505851368371, 0.3151070419095919, 0.32311655429090286, 0.33594892817002153, 0.3189518636688351, 0.3132979493797128, 0.32520200267604094, 0.3238254798918096, 0.3199303244582612, 0.32338373084394867, 0.31692583424550147, 0.3105374003893749, 0.30670570645019213, 0.31706984438591, 0.3249481758731843, 0.3178181503534667, 0.3049673740888475, 0.31246294133494096, 0.3183437822994715, 0.31573684271052804, 0.320969509926127, 0.30850159269774535, 0.3238468310735288, 0.3121701890021216, 0.3191044686049291, 0.3163078222858997, 0.3205350163091063, 0.31629766120097497, 0.31596328332872714, 0.32341319857588996, 0.3162565004572424, 0.3264887402210838, 0.32472210742928603, 0.30918195795578657, 0.3104347087936685, 0.30480882995422703, 0.30470784774976056, 0.30927529104039336, 0.3226256125773496, 0.3110293736819028, 0.3054254029003757, 0.32147304520797737, 0.3106128434922602, 0.31973054730786765, 0.32293655704866325, 0.3073377499601766, 0.32204452910558073, 0.32142050208230766, 0.3137379844218473, 0.30948881417544344, 0.31104844155035233, 0.31285487138073903, 0.31814949989664004, 0.31742671084582874, 0.3086008506218968, 0.3204739757380315, 0.3032234660642548, 0.319890142492399, 0.31628153601935843, 0.3159666317182861, 0.32588350232223734, 0.3189617173153298, 0.3246452238473291, 0.3101863648555674, 0.3191124506662281, 0.3149351024049206, 0.32375524936761874, 0.31481335326741355, 0.3134354893789927, 0.32700631488032866, 0.3253071855400413, 0.3150667541541447, 0.3172660647923088, 0.32373156614225207, 0.3203636019686846, 0.30501008374819466, 0.30567052437223224, 0.3121690854091133, 0.3192568931622689, 0.3138159928841513, 0.3093067012279884, 0.31499496533573856, 0.3170664102655218, 0.31639429562176563, 0.32451065836475435, 0.32213653782420926, 0.31394709508937313, 0.3173038057627107, 0.3119294535352703, 0.310307303898598, 0.31471767176735593, 0.31832525914526344, 0.3084721587019819, 0.30970703313497705, 0.31220701053173655, 0.314724900873535, 0.3086606499243831, 0.31194931230692596, 0.3192961507327661, 0.32806029987016233, 0.32004610359583185, 0.31597986386490495, 0.31759518224737177, 0.3110222911208936, 0.3191526239316012, 0.3180690270569509, 0.31649262073620416, 0.3142733632787201, 0.32513016784827303, 0.31179880637162327, 0.3166446586112215, 0.3210576816728765, 0.3210970145617033, 0.3240888006726015, 0.31764886813845467, 0.3249562949292131, 0.3096988517787649, 0.3196169085977292, 0.308125846373112, 0.3145765039129832, 0.32098096099117895, 0.33086949945619387, 0.3096569635643125]
	ARIMA=ARIMA[:100]

	x=list()
	for i in range(500):
		if i%5==0:
			x.append(i)

	plt.plot(x,DQN,"go-",label='The Proposed')
	plt.plot(x,QL,"bo-",label='Q-Learning')
	#plt.plot(x,ARIMA,"ko-",label='ARIMA')
	plt.xlabel("episodes")
	plt.ylabel("unit profit")
	plt.legend()
	plt.savefig('learning.jpg', dpi=600, bbox_inches='tight')
	plt.show()

#畫不同learning alg即時表現的圖
def draw_realtime():
	#以下為圖用的數據, 如要跑profit則把註解拿掉並把y軸改成profit 依此類推

	#Profit
	#DQN=[0.8060586959378827, 0.3130093484284287, -0.6423864373765538, -0.10187484250873435, 1.1657026782365092, 0.24854634744473683, 0.7739357357747698, 0.341763497618662, 0.8060341776570276, 0.6975861812926877, 0.5717738781765602, 0.4706826542533455, 0.2762538980837004, 0.422080690337605, 0.33747142190633894, 0.6291148860649809, 0.4566732304145035, 0.5436056597477196, 0.5740012036100262, 0.6836540663023437, 0.5561173453965503, 0.5343391036705084, 0.3953659522575778, 0.5818830184683664, 0.46121492089175287, 0.17093661612652303, 0.7922873657353365, 1.395492680879536, 0.32599403644260083, 1.2033337575633756, 0.7914166967663959, 0.6106878710126574, 0.6083407925019533, 0.48622272113309295, 0.7015685503821696, 0.5294681083597991, 0.4925081567513977, 0.4741645293729084, 0.5890254881846692, 0.44505040788355993, 0.6366783520465621, 0.4481864439033628, 0.5765044618343081, 0.5185498120312726, 0.3244075500826875, 0.4921046554599114, 0.5186114368617171, 0.5084926734214243, 0.5218544202426345, 0.5890333067905088, -0.063257518802631, 1.0815611633345035, 0.17131660236813331, 0.20519077549933185, 1.5253714548607178, 1.0773612429532324, 0.7125815177619464, 0.6800021862465889, 0.4877307089561706, 0.4827244743487924, 0.5514416665625641, 0.36657020327872014, 0.5325619171728636, 0.4113927889402465, 0.5101720069826581, 0.5512865479908338, 0.6938357787581803, 0.5516196684911946, 0.5744684881859066, 0.5137248115342212, 0.44546899387062744, 0.39849767458190455, 0.4612196631503426, 0.3991794768868409, 0.5964260437406914, 1.2825335407480336, 0.14601788873675114, 1.3644243962519815, 0.5509657913953956, 1.1691016095297468, 1.2246986692082176, 0.6478462894912778, 0.502515753377663, 0.5331721304087524, 0.47633509606601043, 0.4242721747328665, 0.5181326123565058, 0.5013275652296978, 0.40323368752168504, 0.43410440558442037, 0.48257571020049667, 0.3446777911415313, 0.5434027855021231, 0.5322036590886985, 0.6294891932740937, 0.4935672993637725, 0.5725442769953153, 0.39093188104055965, 0.3742358504608601, 1.0058473928176488, 0.5039763151197402, 1.5938096210854416, 0.4622153790124979, 1.4177524961769044, 1.1017011522559945, 0.6520394587898292, 0.6140439483525131, 0.3929769301489985, 0.6181105259807294, 0.5369606981080752, 0.30219990033271843, 0.47414188170727917, 0.3744380166971796, 0.6060186634063036, 0.5907356078683001, 0.4740518222945278, 0.5234670339260382, 0.4379246444427572, 0.5278271316009426, 0.5289989199380332, 0.3498645899608061, 0.5438755514959481, 0.819117373190113, 0.9504941241676779, 1.3069459319214207, 0.8730077388948881, 1.1848617557871022, 0.5460362159672528, 0.7353087632453648, 0.695653019957069, 0.5019867895906812, 0.4491542392739212, 0.5303352514095789, 0.6368936354934231, 0.45897333747358865, 0.34134394623852554, 0.4426270447823434, 0.4533797204130809, 0.39645606244220993, 0.484525272268526, 0.5058883950188978, 0.48215550950388236, 0.4529435234543183, 0.44442761230387295, 0.6638289541618076, 0.4678558621548301, -0.4794121062895342, 1.6531863611755082, 0.4108968807802753, 0.6032440818168977, 0.7135981219044402, 0.3672511926068876, 0.5600802985024178, 0.5918461203228866, 0.5891614692973838, 0.5350147546909662, 0.5334530142036977, 0.5360312210426651, 0.4978896894589607, 0.42635135738412716, 0.2399599194825125, 0.5370428558319301, 0.565108248720981, 0.6500043854670849, 0.4576737833865728, 0.446534684619203, 0.3528379882730013, 0.6684468567864476, 0.5975438514978405, 0.32946046833017084, 0.6570737348025588, 0.639925227532944, 1.4105317840957126, 1.706986621341239, 1.7602646301048488, 0.9461400275370965, 0.34907999337290124, 0.6127621024419113, 0.44533580026694913, 0.5645863640039726, 0.4773989342292705, 0.566645177709749, 0.4971254752727418, 0.43958853951438653, 0.46846678138416464, 0.500977759915036, 0.5251061327510637, 0.33911363111596304, 0.4065050546134748, 0.6006237695658088, 0.3737904741843507, 0.45615635014512107, 0.4615748624038474, 0.6965108480748613, 0.2500773175409747, 0.44660592920415604, 1.0684621826166043, 1.7582388511198082, 1.158933591403344, 0.5601764094291939, 0.882568884372344, 0.696663914804892, 0.6000730151758247, 0.43465681662014866, 0.6380661694859902, 0.4967492949318131, 0.5694303143703, 0.38998023986402136, 0.43758938615641557, 0.48594460941061, 0.5874922283912718, 0.2868205210215251, 0.4644833460339396, 0.46838471604672194, 0.3633148791663168, 0.4124830859330881, 0.7107787102532411, 0.5531541658444498, 0.810270585779011, 0.6029560284890851, 1.5814331341574157, -0.21855526511610424, 1.7484725043580427, 0.9119663620226239, 0.7095513341955434, 0.6737377211008216, 0.6128411899133375, 0.512213282896523, 0.6471918286594761, 0.42898787957709417, 0.31943790855172366, 0.6141204793862592, 0.5683143098120347, 0.6494857694248516, 0.4062295110547077, 0.5581966073805014, 0.3688339846609929, 0.38926224656925534, 0.3413105184806934, 0.6232609241025158, 0.5938396998545409, 0.7394264488378308, 0.6169538654210444, 0.35025839621139543, 1.608325452391717, 1.629241503225968, 1.6679180614736253, 0.9389129881160668, 1.0036536859569294, 0.5674641216262076, 0.5661009702369117, 0.5307313615737691, 0.6485304962519052, 0.39376959489388974, 0.679839847019162, 0.5479391841364952, 0.6021050406663646, 0.6748463452060433, 0.4775676800124247, 0.6617428599258003, 0.4683144067165406, 0.3875822295187524, 0.3475709479499534, 0.5682362123599363, 0.5772497147665973, 0.28184912631128894, 0.6800960717226403, 0.5405247980321981, 1.206209278155668, 0.23840886374267756, 0.10947365679364385, 0.6107371354840702, 0.6627312345782105, 0.4851025017599019, 0.6506113679940086, 0.7247356361908909, 0.5082813122499347, 0.3866119823416438, 0.43143812194484593, 0.47097106077257644, 0.456705059956724, 0.4562873906631948, 0.41391614215385586, 0.4498191214898362, 0.5179323149831677, 0.6035761120700395, 0.32305239221081133, 0.463378435201207, 0.5583091930239723, 0.4158593027217382, 0.25214107080428255, 1.318303372234128, 0.6871936738856945, 0.09183025928514343, -0.4521418717118895]
	#QL=[0.479911649801819, 0.7488551687718297, 0.5759977313742697, 1.353576635795081, 0.44845151651655013, 0.4508645833763456, 0.19667961205906068, 0.8405982361840145, 0.8102760009437535, 0.4254839650120841, 0.11345744440269386, 0.0790487685279261, 0.21334090401682596, 0.4395936644104818, 0.28325772137186206, 0.47664146971005117, 0.4703088063644136, 0.5645730969328192, 0.43676217200483297, 0.4449140822036896, 0.27231499718320473, 0.28551048151322483, 0.5816900841347171, 0.5836650700705033, 0.1389398961039241, 0.5901976088548949, 1.0187432500350366, 0.44325107662522534, 0.586631879658106, 1.5736364298377288, 0.19824508078989123, 0.4919755380924453, 0.4778964442929346, 0.4845535495334798, 0.6036199392612197, 0.1901494774730431, 0.6156901733171036, 0.42746000790679173, 0.30840507224297553, 0.17341255500053665, 0.17142970383765915, 0.4478424217056829, 0.4889314419152851, 0.4791330449198277, 0.4521988210338344, 0.09922461412962098, 0.3434841213391349, 0.5005630428202129, 0.6020066526701907, 0.36367200105986347, 0.88832058036512, 1.464635912667937, 0.397245530467442, 0.3661107089549691, 0.7564735085658615, 0.4332305678899931, 0.4552881917222038, 0.5496720566317039, 0.5548636305187965, 0.4733274859214826, 0.399864037321505, 0.22410214694012193, 0.5321729062795293, 0.3653244278098357, 0.5709698864802347, 0.608318451053658, 0.39403461452615, 0.3671135551636438, 0.41812059154357223, 0.4177132737833851, 0.5815190145725257, 0.5395291187367112, 0.3727257669198359, 0.41922045931993934, 0.8631302459663711, 0.53261230888438, 0.723356515163252, 1.5000199996504033, 0.0035432224076743513, 1.5236100487558715, 0.13004883363928896, 0.7716968812573304, 0.5537629148755047, 0.6735814098800884, 0.5573033879206026, 0.5141409949688354, 0.3394582451593076, 0.5026966136596668, 0.623052191706932, 0.5102863835577444, 0.2907543860378272, 0.5077647908001127, 0.5440859450658221, 0.5198014075628752, 0.2665013990382338, 0.619583602454245, 0.4221078457240291, 0.045589577937831006, 0.3605109786105614, 0.08852168160866232, 1.2059493583175493, 0.7815350788457827, 1.3832538437133848, 0.7361095865350622, 0.22817067984683653, 1.0117880236896355, 0.733950960109854, 0.6387669877949539, 0.4727372145707, 0.4195274347821396, 0.0786298253224076, 0.37404024160977756, 0.48307798284724157, 0.3697975543787766, 0.4079301132836335, 0.46831007980163314, 0.43265618654217125, 0.45327100810369697, 0.33199020362840115, -0.11650343856506606, 0.6368217476604678, 0.16162033337333864, 0.11743180654475739, 1.1376667427855198, 0.06936366219275092, 1.2797402651754102, 0.4843894853368494, 1.1121692936276504, 0.7748432267434978, 0.3253465470485591, 0.39255995747533257, 0.6619638342925867, 0.40178202413692915, 0.5556825006807704, 0.6596807720455086, 0.3774282540951142, 0.5504251956233065, 0.521757561413841, 0.5226399906282452, 0.45327493968854465, 0.3734153658455696, 0.4497353432031037, 0.2352911262233793, 0.5928551834434121, 0.5447902981134334, 0.41103253457294486, 0.5895764948172911, 0.2025781417514588, 0.35419972861739524, 0.47908032436370185, 0.7466567149135006, 0.4141944716443436, 0.633559823230502, 0.37975563739637974, 0.648807930060359, 0.33795456168480986, 0.5854418133858508, 0.4340418414941287, 0.4219656117409124, 0.5284451314532569, 0.5550272118338637, 0.3732767633603439, 0.2685002087566975, 0.606428649958463, 0.637241267851783, 0.37515098188882806, 0.4889493218745431, 0.5287153123147231, 0.543874657133221, 0.6853515110515538, 0.5490772286088957, 0.6434868357114537, 0.41002706289307445, 1.596269261139716, 0.5254344999123903, 0.07809084218356066, 0.21631796893122512, 0.7325824376714816, 0.6692935574832048, 0.5435678331790457, 0.13101099103088648, 0.4081690066379498, 0.18399789851731294, 0.5832008462619882, 0.4003179135330192, 0.5219190622196647, 0.25311224010408945, 0.23252005785468796, 0.5429276216403051, 0.4445589239052052, 0.48860195992413435, 0.3970761622488599, 0.5624791969633481, 0.5397527167998325, 0.6894946453267464, 0.6205046631388045, 0.14933788635335765, 0.07023586709442475, 1.3301978275165154, 1.006385824282246, 0.7728173259352938, 0.6517912581478179, 0.6809117393725863, 0.177550833338853, 0.6057967571032593, 0.21630496750213418, 0.43965308878235665, 0.43784863105421284, 0.4461830122887574, 0.5829006287792128, 0.434392262237266, 0.34018162592237217, 0.37748266625957183, 0.5939177940971114, 0.3483371967406183, 0.46503564392622804, 0.42115447459357763, 0.3016762921746456, 0.06602475332304866, 0.5565264379672031, 1.4216109791442275, 0.34879733680661396, 1.4757335805931273, 1.194756791116574, 0.7525338045521269, 0.3847470637467524, 0.6829670549255367, 0.6573001814151732, 0.5824911153183623, 0.5219288901816568, 0.4582109595438033, 0.6751461335722945, 0.43301984926523707, 0.619493099358046, 0.47587463276948694, 0.5282589402140643, 0.4730638433748389, 0.5305663788983964, 0.5206901184452486, 0.5698805862672474, 0.5848477911640396, 0.46414125423495195, 0.857319912151642, 0.7709209227604367, 1.2343997056543456, -1.2855644587725212, 0.24701015271079885, 0.5452061668701683, 0.9342391249295152, 0.7411042576748006, 0.1571730260639253, 0.6007743553867647, 0.5549598434895531, 0.4735844501349259, 0.4854289666930904, 0.30205810064893707, 0.3319050417305593, 0.5973019389514487, 0.43324816683178563, 0.49160936958315876, 0.1746478097517186, 0.4151592671254201, 0.39885256631558164, 0.43939682973875094, 0.5597505515687748, 0.11023866626565655, 0.7498056467704679, 0.6640386948535478, 0.9823580941742224, 1.5622836413707914, 0.6738422064273207, 1.4779020571795263, 0.4653939971127355, 0.2764341842397261, 0.3070656576722226, 0.5782130010323921, 0.4198572753510957, 0.2540745846722762, 0.6084609324043411, 0.4352060794133548, 0.3756424547030375, 0.4941428831911894, 0.4559224060422614, 0.5252878387877791, 0.23806364009865402, 0.4621201425813565, 0.2725174695309031, 0.33483477928480343, 0.43514618682840434, 0.16291464737377453, 0.5082475259429605, 1.5622976469467875, 0.5669267569797176, 0.17417055711568588, -0.1488262467138375]
	#ARIMA=[0.5455319678584408, -0.1265016746390876, 0.6716813886950451, 0.7330072666803593, -1.150461148948776, -0.27830250169643617, -0.40160333214140503, 0.4293944808433002, 0.5925765472453001, 0.6326656195118414, 0.5116066736712988, 0.5746951761701602, 0.6041969325467478, 0.6242660440569825, 0.4209612177496638, 0.5991410677570835, 0.4717955440793602, 0.5892596182420822, 0.39391239257382593, 0.6041608499802312, 0.4248465941563376, 0.6159187864922218, 0.4370987516242025, 0.40778771730664176, 0.4412555299327888, 0.47121256214946755, 0.39412938813438714, 0.97390337449895, -1.0448986303223502, -4.76116061500878, -0.45715651558917436, 0.3322630709632432, 0.6469670516461966, 0.5318542943614206, 0.4029361981395098, 0.4827584719059982, 0.47954745790133185, 0.5179488524586108, 0.4651804483364931, 0.5712613814236495, 0.42995523109062456, 0.4303889810227195, 0.5581383753100978, 0.4739327869073416, 0.4094938450624479, 0.4038163172487519, 0.4757942899945306, 0.5343327022884345, 0.42259431060427766, 0.31090439156224836, 0.23396058217784857, 1.0567610026829475, -0.18178452869716585, -1.1077507764144352, 0.04527685840253722, 0.320297234665436, 0.2888492118826737, 0.4186679655292872, 0.6424270523223883, 0.5204150718902792, 0.5590551082626085, 0.5381089880938049, 0.5980776507253508, 0.4772028185224156, 0.4476419834285787, 0.3665012856065457, 0.4429186144653971, 0.585177378469991, 0.5600260868862968, 0.4671598618909773, 0.4163053451441433, 0.5135693871437915, 0.5906346103749357, 0.5806338245567572, 0.7690077086925091, -0.48137415216062784, 0.07049203016128147, -4.335579872804619, -0.8218942050264579, 0.11616352207733205, 0.21968023997306974, 0.616705081482344, 0.4397748352094155, 0.6431620160181949, 0.4141532260722881, 0.496803362295317, 0.587380006979433, 0.4721759766772805, 0.34668265388571484, 0.4344843214692906, 0.630673750604766, 0.40016717226942333, 0.3382122405403213, 0.38714147710224656, 0.5179186958831613, 0.396256959267905, 0.4922437399525405, 0.6221232896787974, 0.29493227229489577, 0.4586579014645622, 0.6244164836852167, -1.4429579321572226, -0.8165287659985969, -0.27767291690234536, 0.5704622586144197, 0.7070053810370251, 0.6533479958137413, 0.46224199649826914, 0.5445563239447426, 0.48655764579488625, 0.6071813522482932, 0.49497715810836324, 0.2978692938395992, 0.5267349316570716, 0.519472532258508, 0.5585856679724077, 0.3103989712350466, 0.5513833141616827, 0.40788912781449926, 0.39243816769903633, 0.4104680210408542, 0.6206894864720001, 0.8143944716057969, 0.6158672860699633, 1.1179385949648413, -0.2687787290960779, -0.3176563844579527, 0.47304542236011954, 0.5605491031022369, 0.3932454458631451, 0.7416118054049677, 0.633379848894889, 0.43782778552414026, 0.5661152544932866, 0.5552637282214022, 0.4195222229556267, 0.5772779381698231, 0.46332828543680865, 0.4566986186164787, 0.5923632619995691, 0.2632989735117784, 0.3636670252174256, 0.25922539794743155, 0.537497097999659, 0.3526958348909375, 0.27508152591026214, 0.680852552409569, 0.41600040374881403, -1.3080836349532832, -0.37316671123305767, -0.2814513355906234, 0.5227930733496308, 0.4258464583942263, 0.4777401424365401, 0.648867083354741, 0.6464751181900212, 0.6139830721653168, 0.5240893638252576, 0.5120512888046497, 0.41342364101293166, 0.44922013083691786, 0.33031613121700965, 0.4906632882779101, 0.5163337750287594, 0.4591600065418947, 0.400041823677337, 0.446994431769524, 0.4411832853077167, 0.316200649152474, 0.352718640403533, 0.5033458840051068, 0.31155857119745, 0.5359149158443719, -4.380551429930026, -0.38591889667947515, 0.18482213115652613, 0.681091595346584, 0.5655879938681119, 0.5932071643906006, 0.6029735471284923, 0.47939773252805296, 0.4697142914022753, 0.4626443389899304, 0.17501534977182318, 0.5029564354553162, 0.45137175867026436, 0.36004839941474176, 0.3903280188391314, 0.6715333602083582, 0.3718961693777487, 0.20955821238474007, 0.5780092137766678, 0.4066097226849503, 0.4951242311980657, 0.4983727282760763, 0.688426408759247, 0.98148705008097, -1.5970472693640436, -0.27795270232643904, 0.5890384472380967, 0.5197672255632545, 0.5606489839025897, 0.8044533400216373, 0.42624596896884076, 0.6139840865156629, 0.5171185616019347, 0.4904443400786127, 0.451915119741701, 0.3814479707354628, 0.349657693247199, 0.4782029257416907, 0.46615531183386744, 0.4002450550043556, 0.6160657486144413, 0.42088059555020535, 0.3649715745728848, 0.37748998254860655, 0.4322863758374626, 0.57257240373588, 0.6447937631401247, 1.0010987703847538, -1.206662704738544, -1.7975578728234551, 0.49207445308408043, 0.5599466202868565, 0.49856833696431674, 0.6377458797020129, 0.6042760919321541, 0.5467769540342745, 0.5374786874719552, 0.4954582772040273, 0.4679096589523392, 0.5149953184828582, 0.39795110599128103, 0.42674357147708175, 0.5621443466699507, 0.438899192951769, 0.5419792883761313, 0.4799558786824255, 0.4524547313048757, 0.5934853595488317, 0.6684831156941384, 0.5264408036268237, 0.07393673565871114, 0.5013054647456263, -3.46686853609228, -1.3869623678226546, -0.2955807918408224, 0.5020535383503001, 0.5043818998031417, 0.5680470913657567, 0.5358846849527829, 0.712799660382751, 0.556485640922583, 0.497075146798431, 0.3540001488279122, 0.5211485157798449, 0.5139675572813013, 0.47941439505885247, 0.6374653996048739, 0.5883973581602953, 0.3593304203326108, 0.49423934557992477, 0.4196811562227239, 0.4094716707284608, 0.46989865827656585, 0.5182955678585311, 0.34776944604362886, 0.4564614460924158, 0.8871420971425743, -0.31736665724308555, -0.3704048743690989, -0.3699576443687773, 0.6462583362464164, 0.4611782907959374, 0.6530903764772036, 0.46110992635200115, 0.5875386645919842, 0.6037563302867599, 0.5269794141020635, 0.5744669211720668, 0.46384797880903195, 0.518983623256468, 0.40610563773032715, 0.3551554271203499, 0.3411230684660221, 0.39371687129066363, 0.4595493192684594, 0.46942739366442376, 0.3828384566134616, 0.7194711690101506, -0.4640061370507862, 0.7213106265998601, -0.21195668762202016]
	
	#Revenue
	#DQN=[1.33153226741895, 1.3552147977931792, 1.2328890762049711, 1.6663320659076388, 2.0290403079668162, 1.513950979057678, 1.6930980595266376, 1.5042032783844697, 1.61062755770879, 1.2098141485588025, 1.1235149260645372, 0.8209225408043717, 0.9635638053026765, 0.7744963180140715, 0.818894967974883, 0.7554396115328662, 0.7308104285391382, 1.1041554865348568, 1.0287930770447153, 0.7483087327201065, 0.781993810828302, 0.930720048449516, 0.912631502107076, 1.1315093392646123, 1.1018720513073073, 0.9023182322506239, 1.2442349759408828, 1.5505059757022033, 1.3144315237709712, 1.3757250987877219, 1.3954698352651587, 1.4967527455060747, 1.2183470392901024, 1.1815838285758757, 0.8889288875067948, 0.9396065339699832, 0.9580023836670585, 0.9544700433863917, 0.5645692018163637, 0.6424249452766706, 0.9269308585176324, 0.9736332844422908, 0.7411592923044334, 0.7735761292725385, 0.6145866510939185, 0.460464547905767, 0.8583095222078171, 0.7091603660480607, 0.9802044501199774, 1.3280939418273652, 1.470836462814551, 1.4531142898202303, 1.1435322581614475, 1.7891019822974172, 0.8424012667409433, 1.4738907818355962, 1.2040008522043573, 1.2246173443079158, 0.8563478020716855, 0.932986562846657, 0.9986520763659619, 1.010899485170987, 0.42062932694094246, 0.62234377196562, 0.9615365792851137, 0.8543740388006812, 0.7863901707364753, 0.6913561724961952, 0.9134990003131412, 0.8908759121376691, 0.9924765336034141, 0.9425692821490718, 1.1452727142038612, 1.1903845308226784, 1.3306383077473378, 1.657907193475416, 1.4714004828063718, 2.138623362713971, 1.6102372805181193, 1.0446320235232052, 1.6310820304065574, 1.480608151177003, 1.420195615704123, 0.8484206546051033, 0.7276391698568603, 0.9378167294155139, 0.8967898816080888, 1.0063205495945584, 0.7585218575958528, 0.7869487485205253, 0.7056158280659812, 0.6886864147386498, 0.8160867689943102, 0.8625332503797305, 0.8365119098270306, 1.0792525238326889, 1.0789794861091013, 1.0313226038540508, 1.2422313738650483, 1.657369614198409, 1.5873734716247079, 1.677703466043025, 1.8837244367756365, 1.598984464205196, 1.5324403320359707, 1.3504217172603803, 1.220736627624964, 0.9630595007205943, 0.7583205184394454, 0.6887321081407106, 1.0431172728983849, 0.9669881369001805, 0.8379523621069468, 1.0867430754064278, 0.8549472350663009, 0.6550492199235303, 0.860916633823615, 0.7478334035866725, 0.7805963199390338, 0.8708841747224729, 0.9260753333242937, 1.264882518147342, 0.9307983654806447, 1.6227367741736007, 1.410135039808367, 1.4947164117748288, 1.5010317118974503, 0.9289178782606784, 1.2235056317753767, 0.9495766934800606, 0.7371128290498294, 0.6711914804564916, 0.9093356664110432, 0.9081491062680479, 0.8654275721423971, 0.5429335256741222, 0.8072872491544417, 0.7603858892967433, 0.7646693442337904, 0.8828805593772628, 0.8310292668278992, 0.5344255699140926, 0.752729236702118, 0.8481690803565859, 1.1508283748865429, 1.2113933172065814, 1.0580893021055437, 1.3882977636532863, 1.6351423828156604, 1.1327630175475065, 1.984221905513696, 1.3647066951681879, 1.367247102239801, 1.3519360659358632, 0.9306959234444364, 1.0681852751702225, 1.0343801982176282, 1.0093382926073984, 0.8135614253038203, 0.8689250541216612, 0.5331271639836065, 0.9745403077920243, 0.921224140453703, 0.8098923222534673, 0.8110372856961698, 0.6881325454489152, 0.6984742490145464, 0.9573994197374678, 1.051472431740391, 1.3323468762059623, 1.1102859577786348, 1.5287696298110984, 1.433989424426072, 1.3979683353947618, 1.581166908263314, 0.9578530903372474, 1.2488647931144066, 1.2873706618125875, 0.8187759336954115, 0.8083486545361729, 1.0032992350821923, 1.0120982727583816, 0.613054608184004, 0.47627506394981245, 0.6319619170932772, 1.0387533802492683, 0.7314985160487382, 0.8489142385858078, 0.8527720058272812, 0.8308248957467327, 0.825177602018235, 0.8120928094918088, 0.9876410001413093, 1.1793085594658916, 1.3206490276893794, 1.4141238940611955, 1.704989653824769, 1.7104454811145537, 1.3863956590997255, 1.3763657616114509, 1.3092743479251363, 1.3459685631885778, 1.058264120585318, 0.9121590793316577, 1.0568488390032238, 0.8721667218771832, 0.8108071456134339, 0.7562160024418556, 0.7941935321837416, 0.9341196351483473, 0.8863837829276653, 0.8550101911222084, 0.7830682399106695, 0.8565406634162147, 0.6835034534121333, 0.7157267309487964, 0.8249821287899749, 1.075651799765294, 1.430653996921059, 0.8112204074521249, 1.3987557877853745, 1.2919854711094896, 1.4948632434251157, 0.9622653605744785, 1.2804636889887349, 0.9482946225568546, 0.5756578359404526, 1.0611449426265427, 1.018999976505277, 0.8005709137768227, 0.4650057401474663, 0.8140690249987049, 0.7875254506980418, 0.8113879484951625, 0.8612747389191217, 0.8194785072967304, 0.7981860242252768, 0.8820480895075238, 1.019698172601309, 1.1121772855285315, 1.1710442761267117, 1.2158642246964462, 1.1441242838669234, 1.8949774965971735, 1.2248264706311456, 1.4724521557584906, 2.056458871078182, 1.5926308204830386, 1.3384053012616461, 1.5313900453137688, 0.9602710106544858, 1.00137863119495, 0.8729892472774416, 0.9780462992040106, 0.7489482461573385, 0.8951018211466434, 0.8004166333992772, 0.8993260549750131, 0.9140952152627586, 0.9195856395863874, 0.9133350658389522, 0.8350823800536114, 0.8745413982701842, 1.044478192304405, 1.1341472987973151, 1.1890600161063563, 1.3178716338655836, 1.0934744538667411, 1.4503069373596547, 1.2287478569022297, 1.5302894143759007, 1.31382535383433, 1.506361678063854, 1.2138104580288058, 1.3914439051378045, 0.8887941453817405, 0.8859906685756989, 1.0077145145175883, 0.8923204684965995, 0.9778826839261721, 0.8087984115030478, 0.7455056594535666, 0.7588862454596225, 0.9859476450401176, 0.6253769021281084, 0.8865022329645804, 0.46993016426773854, 0.7254898426067152, 0.9125810450888847, 1.2832104083603237, 1.1011485901419902, 1.3333424549139534, 1.7058984957071592, 1.6048971619383083, 1.9296253124938956]
	#DQN=[1.2693304068630302, 1.5159688870812553, 1.8499017728446123, 1.1110301584160835, 1.9668727923596108, 1.3840019318396746, 1.279890062718267, 1.557686471477767, 1.3726644889732176, 1.116373161720496, 1.0449150092639576, 0.7928276460786969, 0.8949878694108043, 0.995891423355326, 0.8535472320964925, 1.108720629102283, 0.9902571743107984, 1.304640258140165, 1.1613204705601874, 1.0206344888597418, 0.6040626128559503, 0.8124946184531231, 0.8486368910048687, 1.1404667521095297, 1.3205004758385137, 1.6645236386401479, 1.5814620279017837, 1.4769065582974208, 1.5184201608325483, 1.8688971690370508, 1.0712172722551048, 1.3256073953973693, 1.377217357372601, 0.8728685103146847, 0.9493425578999957, 0.8101816957252322, 1.0781019349533203, 1.0447899424981866, 0.8113669599271638, 0.9353081360775061, 0.97721685133417, 1.1521703236666971, 0.8642069248249729, 0.7832298928273703, 0.6774622886626431, 0.7994072373739299, 1.0813367770655598, 0.9589483286288287, 1.104196207554018, 0.8716030326801782, 1.248088431292815, 1.2451631285021958, 1.5834200476582245, 2.316167431540352, 1.2158680328886462, 1.5941793876466657, 1.2354334821281443, 1.3741217021677625, 0.8454357321472018, 0.8474123069473983, 0.8225572791287326, 1.0450384085452447, 0.8544913949505605, 0.7644907277743828, 0.9977652142908761, 1.1177630821822024, 0.8991179723350835, 1.0415254566539243, 0.8494723576151846, 1.035784860174492, 1.0580776904502305, 1.1319969994047887, 0.9663810665998313, 1.4002185712911437, 1.310625647430722, 1.346569097664564, 2.045565966551406, 1.3893286956174584, 1.3681209837848998, 1.4322256572109804, 1.7453899994431594, 1.2564472356635554, 1.0960065803370111, 0.746987071643171, 0.5633760834654534, 0.6058339971058623, 0.6329778169494065, 0.95429305137097, 0.9819727852459519, 0.9337107533772561, 0.9088676988515556, 0.7205864592032908, 0.7840740737490867, 0.9278610824001592, 0.9816410448585897, 1.1617035192537994, 1.1459791616917543, 1.3688116894014417, 1.1773704904574118, 1.260232251177343, 1.3099383661490072, 1.6087091863964664, 1.5004771836332789, 1.600852821988127, 1.6585882513858752, 1.3349338503409596, 1.0038740716540584, 1.0127775930622678, 0.7065077501161765, 0.5977179309209989, 0.6683896057797326, 0.8381431169447193, 1.0591664943025043, 1.2713835780416944, 1.118469310615813, 0.6781758602015918, 0.9197271405149596, 0.834731934122733, 0.9483882405476874, 1.0328733749760464, 1.0805870422241444, 0.9104850451515063, 1.395628983026878, 1.4203162852701363, 1.5501109152187666, 1.2708232644272663, 1.5385303802121049, 1.1620425712677385, 1.1841511575627877, 1.1989991205449366, 1.0957425206478064, 0.5701759580719145, 0.9901420251478361, 0.9979332544339081, 0.9437079764238316, 0.9501361098216414, 0.8324183270287713, 0.9407248931407205, 1.0346568813245083, 0.9124782182964541, 0.5893163426289928, 0.8586815691747068, 0.7361135621188166, 0.8720100913971072, 1.1681448979624909, 1.4531762823231487, 1.4935341131554636, 1.7086744229703548, 1.9396666540654859, 1.9170359741818697, 1.0763119615098347, 1.54112238385043, 1.1917753936650106, 1.1566072036604393, 0.957614378051243, 0.9817019988977818, 1.1022846424459947, 1.1477463566219244, 1.0500003306318781, 0.9774276112695823, 1.0372801764611965, 1.1255007588557655, 1.0530912639776502, 0.9410340226669301, 0.7433097810837611, 0.8834698754884894, 1.0099671936150094, 0.9042423739755882, 1.2276824613714972, 1.1710030706887307, 1.8001242913321787, 1.4426734818988396, 1.6079118678421451, 2.2749726549736087, 1.6726404576374572, 1.100357512662384, 1.2184299320006093, 1.3265171181113273, 0.7669325190155203, 0.9148760159181669, 0.9619708121995074, 1.029838735998414, 0.8864190125669751, 0.8875677173520485, 0.912868312753045, 1.2044558210545229, 0.816541477043407, 0.8453828102770312, 0.8593550559639399, 0.8991559846198682, 0.9155124488652401, 0.8223692352636002, 1.1394384983802108, 1.3499982674857485, 1.2960714437241558, 1.4521462540080219, 1.7664853175756983, 1.7523188456956187, 1.3961014131772798, 0.9984917260146018, 1.1817582664885145, 1.4773769522028615, 1.3087724379266283, 0.7063080165701044, 1.074203368721323, 0.8324860741237894, 0.7648149532158958, 0.9258889275305341, 1.1073358078765898, 1.062364702983739, 0.9702679129623133, 0.7362330241390361, 0.7479942553034421, 0.9020976755578923, 0.6332744113149671, 0.8092686061514753, 0.8246395574640047, 1.097691671305743, 1.3508411429929303, 1.4693400867831112, 1.5463734362445793, 1.7734685492012814, 2.001665774441055, 1.3375341978572368, 1.2815135140636351, 1.265953184615976, 1.1938179874296588, 1.147185148183683, 1.1080940676267774, 0.9397772976002494, 1.0148201395973422, 0.9437244302970953, 1.0408614269924736, 0.9741670483099033, 0.8787045111633779, 0.9348818935373153, 0.8907904984109649, 0.9804737886149678, 1.0755391939815866, 1.239270917016662, 1.2380131267560703, 1.149348691945138, 1.3731252896832105, 1.6050004679332754, 1.3358603700507237, 1.7220509928756333, 1.6375710139502406, 1.325655142653818, 1.4057617147073533, 1.4202600894397703, 1.0635009039406766, 0.9145022858460098, 0.7877752541502658, 1.097642867534945, 1.142059512459311, 1.2085259771481516, 0.9647747700461734, 0.9801568920830316, 1.0163894071802968, 1.0096927927666173, 0.8531820093213008, 0.9596192700799161, 0.9038314479806944, 0.9900324938174777, 1.2194632596080544, 1.294984225145624, 1.2364622993290617, 1.3622214203680028, 1.3978131577069808, 1.3905415245938395, 1.322456672946539, 1.513107822863315, 1.7883034196382146, 1.6115941370334788, 1.4592119009229458, 0.9882191872292028, 0.696666067442378, 0.7067711367544863, 0.6830478709247463, 0.825760881252289, 1.081972238419693, 1.035251506536086, 0.9895007462488422, 0.804408128038149, 0.7994378875572345, 0.8730014060010828, 0.8696718419454676, 0.8692677139567716, 0.9902604882092214, 1.153023838544219, 1.494119937107539, 1.2424214356081087, 1.6957690766203692, 2.0060491731672134, 1.2885091072510346]
	#QL=[1.1538853979344075, 1.3560410354523782, 0.8895423691269708, 1.6472697774092078, 1.3336756644429937, 1.5321251369752291, 1.725637503030259, 1.615703715455325, 1.280971773388413, 1.4932395468054709, 0.9920994399047472, 0.6720274844000125, 1.1764945188856002, 0.2874690666377817, 0.7934761061246398, 0.28843887981180394, 0.9383738263350544, 0.7721580241862834, 0.8636654368280313, 0.7760899233320391, 0.18288300015182476, 0.7655692283348391, 0.7916304629350452, 0.7432938304382405, 1.317250922996851, 0.7505574072824167, 1.0090343908062986, 1.2513511206199626, 1.7268363439997914, 1.7939021205732155, 1.6442960310284798, 0.8927519964363947, 1.5045021863334176, 1.310378752648293, 0.9739563036796247, 1.1835647930836704, 0.16709183483839132, 0.9955330049666531, 1.0980690808118507, 0.11723782122589559, 0.597267227240128, 1.0539145551880802, 0.8897716693997242, 0.7751074768262853, 0.8553565796595681, 0.8744306970657211, 0.7936803161989211, 0.9881678230581369, 1.133717002564112, 0.8469313052833148, 1.4515969936282314, 1.3195242525583528, 1.7606174101382048, 1.7856555518290234, 1.6110152524829775, 1.0801394929326689, 1.516921880541975, 1.1943754624513983, 1.365011523757801, 1.1779954317878765, 0.6157574438987717, 0.9590843813382878, 0.43336562663652584, 0.7592893946744642, 0.25349212568752766, 0.747470877163915, 0.9204339189353045, 0.9756521957014537, 1.0401010193774256, 1.0774956593742533, 0.7449863226316976, 1.0092704784213282, 1.1823762676520864, 0.9992264752160144, 1.2380937841324007, 1.3616102192315804, 1.674351081274096, 1.985584595481628, 1.6605190540394248, 1.4814145225507698, 1.3412492431282705, 1.3465577928550954, 1.3737134701704605, 1.0295795426073513, 1.0103684555767465, 0.99823919870767, 1.0477227620490388, 1.1123632387894178, 0.6160302174663951, 0.8168657390161547, 0.8077771945687993, 0.41454456900967324, 0.6733352919411977, 0.8827468187706142, 0.9327721410814178, 0.7175874963611861, 1.0231218900785632, 1.3729477202536136, 1.1597199097364737, 1.6269414492772578, 1.7666691857760803, 1.2804466310576545, 1.2043182803987136, 1.4590490279029062, 1.6280283848607904, 1.4660347353663297, 0.8812561234238065, 0.9143192636577895, 0.8513089311114304, 0.8241141466911281, 0.8359514001689311, 0.48644328023248223, 1.0575754449282364, 1.2469975170779166, 0.985809717219677, 1.1110575383116967, 0.9103121896385742, 1.0138474676853282, 0.8681396428298096, 0.817813788589457, 0.12688180638312457, 1.2331795712981768, 1.296074250152537, 1.7566250564544916, 1.8871258029602902, 1.4737782817883485, 1.4893190262118992, 0.7588576726715129, 1.1065889630645989, 1.2915263924530322, 1.3264272333657248, 0.87767713358594, 1.0459484273175237, 0.5823285130935442, 1.097289179884486, 0.949657650766414, 0.5826817249235208, 0.9310507860040458, 0.3829750213352871, 0.826590326284931, 0.4374922138392941, 0.8409151869885932, 0.19226814011708007, 0.6294934091311181, 1.31251858497375, 0.7734086639999711, 1.53895780969453, 1.3029135523252484, 2.0252263297980755, 1.3109924592129132, 1.5748861158216598, 1.2135568911404413, 0.5226654525659316, 1.2968400823688087, 0.4435448641429978, 1.1778037940582728, 0.8399889055749544, 0.8716287993413346, 0.6664272096983831, 0.7189002390638332, 0.9867058011905687, 0.6111444082822013, 0.9379520689972406, 0.8165698118921787, 0.7951139836478445, 0.8488776803550947, 0.9926213568836182, 0.4455930750704909, 1.1224590026678447, 1.0397798536353737, 1.3275741577301252, 1.3677130904209855, 1.5381450535402938, 1.298174852877283, 1.835767452935919, 1.6243684205090076, 0.8148033651613673, 1.25772544739322, 0.3701374706659399, 0.9094127672051212, 0.8035724407196936, 1.0455257612323179, 0.6632945765297412, 0.9701965679715407, 0.7911533611573489, 1.0299409133840425, 0.7855684397969868, 0.6957870384847252, 0.21001325077465047, 0.5684441132428718, 0.4943382546949453, 0.6708193727025598, 0.8173443764522487, 1.5049920845266178, 1.4983037209216434, 1.327221008856809, 1.3947902995173536, 1.952786138236434, 1.2635749830818972, 1.4654678410235447, 1.5227807936427433, 0.5646750148916804, 1.4181730754750208, 1.039359680872615, 1.2035732441391098, 1.1339104252664411, 1.0522816249527807, 0.7805310988635129, 1.0105710070191012, 1.0988061975474033, 1.0028271722103552, 0.4328560260385795, 0.690450585542707, 0.2560487502373392, 0.8214531306752678, 1.0474449710126053, 0.6023777967789418, 0.9143405579704633, 0.49338966602141004, 1.0534299232052657, 1.7719352236869685, 1.6348956289513326, 1.9235415179988207, 1.5211776449183911, 1.1660898080449449, 1.3732183505291384, 1.1256510211966222, 1.0540747780402393, 1.1167489159315729, 0.4446870867192594, 0.9159184028095835, 0.7226898069180026, 0.9933805422196943, 0.9718875112527325, 0.7481301013688297, 0.9172051447277726, 0.8285733238684942, 1.0842118123664923, 0.8351861420038251, 0.7672051137099184, 1.038648333453767, 1.3766965654140828, 0.9523643232601104, 1.1858372602508764, 1.5955736333158956, 1.997426297732328, 1.4296557790120528, 1.5491513937619434, 1.3763878500016091, 0.8283688205972154, 1.3671352850417215, 1.2863656779925556, 0.674381772349213, 0.9963186270133788, 1.1789202099335412, 0.7845402451995129, 1.0378467143041619, 1.2575153966599955, 1.1089740361289957, 0.7991581636247872, 0.30652719076702895, 0.588741695635129, 0.5598760490839918, 0.7743751419259404, 0.86341918272282, 0.9179638711124483, 1.3160592654687333, 1.2768125792952854, 1.0832355644671205, 1.231391913538336, 1.7489948405590543, 1.4840532467409073, 1.324027552039517, 0.9466431568697808, 1.519757744094448, 1.4354280136162803, 1.1068045539326898, 0.8510057933481866, 0.615258078869923, 0.8680841278729274, 0.9983976594488794, 1.229439955967021, 0.513177429495072, 0.6449425170326115, 1.0152359514153448, 0.8187635289688976, 0.22522727514237934, 0.9649287652077956, 0.8486519368126086, 1.0682004230837687, 1.2412441712220692, 1.2766979398086635, 1.6378318649607615, 1.5957545355417204, 1.4911463307892854]
	#ARIMA=[1.2654163602442463, 1.5424881831963588, 1.5152379640516518, 1.6837983069257805, 1.7775466492182381, 1.5013334957742475, 1.7025575073253654, 1.527984368203148, 1.3981912716265554, 1.1506718223584196, 0.9266428547749503, 0.8498850426034112, 0.9302418794712304, 1.0223033414055667, 0.8778782378653753, 0.9614458750654412, 0.9071472070011297, 1.0602766209397814, 1.2200885574994647, 0.8016389218850185, 0.857536127993638, 0.8035957509077128, 0.9202811590391591, 1.1617552671500044, 1.187503052689283, 1.3338549833800526, 1.5082337318332164, 1.4535918984523346, 1.9231100750094705, 1.4137409857194996, 1.6665272324458595, 1.3669328509325709, 1.1694061845403914, 0.5708992812714364, 0.9078040141352929, 1.1284498438457369, 1.021847961184073, 0.8797636891598188, 1.1022973066142228, 0.8850427217995653, 1.1371606492163828, 1.1178623558793024, 0.9498013924043467, 0.8459849213533248, 0.8582427637651983, 0.8451771413023175, 0.7524437370840731, 0.972918447949615, 1.23274593394276, 1.2097373852498083, 1.7169243622352353, 1.463598655475158, 1.551516422482396, 1.6589296057118452, 1.594336528055899, 1.4136314785208273, 1.0865039674063055, 0.8768691020354304, 0.926244976771739, 1.0697063283349793, 1.052034760870086, 0.8167280778433691, 0.7314929944770044, 0.7915326283488143, 0.9514211319248421, 1.1817228742628467, 0.9517748989824403, 0.8462775626545623, 0.9059498689134724, 0.9978113610140396, 0.9270320555116323, 1.0364352782449715, 1.2146464027847244, 1.1744197093919628, 1.320119642573202, 1.6632528134813, 2.0754989604069736, 2.006776891011287, 1.6028171045979016, 1.651315545444446, 1.6067465490901796, 1.1015147538461338, 0.6977772114116125, 0.9895637148025364, 0.7901134429104425, 0.8961664845135181, 1.0704310505733228, 1.111807609730162, 0.9706995352226507, 1.0777400630981735, 0.997790739071559, 0.7514207530467497, 0.7674538370148161, 1.116090766795646, 0.9320938748178896, 1.1580279195413767, 1.0831514794742774, 1.2775065817465763, 1.410033073739314, 1.5614539502670979, 1.5223031606347002, 1.1982768747251504, 1.525043052594002, 1.7993859994377333, 1.3608697137112935, 1.1365948783746296, 1.080133076227463, 0.7507661203637891, 0.6824714605518892, 0.7776905047105378, 0.9440171875124665, 0.8941967779096165, 1.121622392440565, 1.1258417373486471, 1.0154249199398977, 0.7313537479681951, 1.0295080864660813, 0.8669207652740502, 0.7583444603955685, 1.0385912687994565, 1.2305673663265293, 1.1660322450155274, 1.5200739797598823, 1.6442388459555206, 1.7006777072264114, 1.6086928340813091, 1.6088969364661179, 1.5522249405838662, 0.8798366461680306, 0.688429076842787, 1.028907112367631, 0.9383707055268229, 0.9396346773222217, 1.036571880352467, 0.9826935471755355, 0.9058689712068235, 0.8528972574067908, 0.9904364469572857, 0.9290601143615566, 0.6572121384282494, 0.7920494626078544, 0.8311122507817039, 0.8542964508205543, 0.9017559092065374, 1.1411700993173675, 1.3275529982640217, 1.5877880286864965, 1.646837173711791, 1.6786554599520804, 1.7231189169701926, 1.698673223076547, 1.3312205193844404, 0.9765718756797294, 0.8637143650683675, 0.9831311852074379, 0.926288061621311, 0.849894018990266, 0.9689286610879304, 0.9171875723730335, 0.8565609311004877, 1.0439247305289348, 1.1358987245465788, 0.942786431573318, 0.6086956714808327, 0.9325559010067289, 0.9528845369644012, 0.7583681746457497, 0.863729283950211, 1.1318177121950843, 1.300539434320814, 1.392048718246049, 1.3632046490275005, 1.4089424744827777, 1.9235437455153985, 1.7503329745515444, 1.5401185791796654, 1.3995741019510444, 0.5827806755543403, 0.9920326812535335, 1.2043124862419985, 1.0606106052119568, 0.9083566438136774, 0.7649851398468859, 0.8235263589593742, 0.965428588118199, 1.1342650086320898, 0.9667948993283542, 0.6502735963519016, 0.8458576555642956, 0.8466778794393681, 0.8580456467129702, 0.9031926313618994, 1.079717992324613, 1.3469424887463677, 1.3989306308085647, 1.326921610410529, 1.2627117591114665, 1.6686473714901258, 1.6811041104479159, 1.2353252196593691, 0.9536878589965326, 0.857302390545694, 1.025719924955537, 0.8638442387773491, 0.7682235612491151, 0.895474271405021, 0.9459589695136189, 0.8974582431556274, 1.0493356836139405, 1.196602183234965, 0.9276385290305023, 0.560599934509861, 0.8458165918879836, 0.7337319531136598, 0.7586533323518512, 0.8649851433448741, 1.1418291141928107, 1.1811665566578256, 1.3810071777100261, 1.6511492977942794, 1.6109174263736203, 1.3623028330228721, 1.515587972398795, 1.4900077568405408, 1.0090741548335775, 0.5338313012084198, 0.7737363298385392, 1.040502054322455, 0.929804186960771, 0.7608084924759501, 0.7296210619410082, 0.7944094014492222, 1.0678193982241329, 1.0765856221119015, 0.9332204656239281, 0.896064809393108, 1.0150126294928392, 0.9066691285227617, 0.9626735983313942, 1.0820336988868595, 0.987808472658953, 1.1633970144499044, 1.3377726092712008, 2.029503616147219, 1.675936757985477, 1.9585892202082265, 1.9510880670712996, 1.5951095078365223, 1.1858017404477696, 1.0180560157099687, 1.112937908113291, 1.1481887482377724, 0.9890487624059496, 0.9501055562207034, 1.0024877501564393, 0.9103702278660127, 1.0504456271900773, 1.036946686866347, 0.9599135164985233, 0.7530737496012609, 0.8721323221712565, 0.9227912396554215, 0.9027908333478514, 1.0641923048529935, 1.1101651205407284, 1.1226365447015925, 1.3026542905515208, 1.799500473748813, 1.420064668824265, 1.3934914825393137, 1.918907606508964, 1.558738322872628, 1.7982624320298377, 1.3467284358614493, 1.0962773042879477, 0.9307681807923477, 1.0330545671333602, 0.8715040392488955, 0.9347298165018211, 0.8675967162468939, 1.0833603831061664, 0.9879683522510836, 0.8247000816957208, 0.8987064106174187, 0.7706015690421135, 0.7560858538337134, 0.8320243711006361, 0.8920156726025804, 1.088156175284456, 1.3186230899407287, 1.4280902318732873, 1.7609106439188977, 1.8526712207219036, 1.9806576634255857]

	#Cost
	DQN=[0.9545454545454546, 2.0, 1.5, 1.0, 0.0, 1.0, 1.0, 0.8571428571428571, 0.75, 0.6, 0.45, 0.42857142857142855, 0.34615384615384615, 0.36363636363636365, 0.3076923076923077, 0.3333333333333333, 0.6136363636363636, 0.5, 0.5, 0.36585365853658536, 0.42, 0.375, 0.5333333333333333, 0.5625, 0.9545454545454546, 0.75, 2.5714285714285716, 0.75, 2.0, 0.0, 1.0, 0.8571428571428571, 0.6923076923076923, 0.36, 0.3, 0.5357142857142857, 0.4864864864864865, 0.3076923076923077, 0.35714285714285715, 0.574468085106383, 0.47368421052631576, 0.65625, 0.3488372093023256, 0.4666666666666667, 0.5454545454545454, 0.4897959183673469, 0.5294117647058824, 0.42857142857142855, 0.4838709677419355, 0.9473684210526315, 1.0, 0.0, 1.0, 1.5, 1.0, 1.0, 0.6923076923076923, 0.47368421052631576, 0.3333333333333333, 0.4444444444444444, 0.46875, 0.20930232558139536, 0.2553191489361702, 0.4909090909090909, 0.391304347826087, 0.34285714285714286, 0.5833333333333334, 0.23076923076923078, 0.4883720930232558, 0.631578947368421, 0.5869565217391305, 0.4864864864864865, 0.7241379310344828, 0.6521739130434783, 1.2, 0.5, 0.0, 2.0, 0.0, 0.75, 1.0, 0.6923076923076923, 0.5, 0.46153846153846156, 0.42857142857142855, 0.4864864864864865, 0.4864864864864865, 0.25, 0.27906976744186046, 0.5384615384615384, 0.40540540540540543, 0.375, 0.4186046511627907, 0.4186046511627907, 0.375, 0.6, 0.7741935483870968, 0.7142857142857143, 1.2857142857142858, 0.5, 0.0, 1.5, 1.5, 1.0, 0.8571428571428571, 0.8181818181818182, 0.5294117647058824, 0.36, 0.35294117647058826, 0.375, 0.43902439024390244, 0.20930232558139536, 0.3157894736842105, 0.8076923076923077, 0.75, 0.21951219512195122, 0.5833333333333334, 0.5581395348837209, 0.5192307692307693, 0.46153846153846156, 0.9642857142857143, 0.75, 0.6923076923076923, 0.0, 0.75, 0.0, 1.0, 0.42857142857142855, 0.35294117647058826, 0.375, 0.34615384615384615, 0.32432432432432434, 0.2647058823529412, 0.3076923076923077, 0.3157894736842105, 0.32608695652173914, 0.4772727272727273, 0.40540540540540543, 0.47368421052631576, 0.3191489361702128, 0.4375, 0.46153846153846156, 0.4576271186440678, 0.391304347826087, 0.7, 0.9375, 1.0, 0.0, 1.5, 0.0, 1.0, 1.0, 0.5625, 0.47368421052631576, 0.391304347826087, 0.46153846153846156, 0.28125, 0.36363636363636365, 0.23076923076923078, 0.2727272727272727, 0.3488372093023256, 0.45454545454545453, 0.36585365853658536, 0.5, 0.6153846153846154, 0.35294117647058826, 0.42105263157894735, 0.4090909090909091, 0.5357142857142857, 0.6, 0.0, 1.2, 1.5, 0.0, 1.0, 1.0, 0.75, 0.391304347826087, 0.32142857142857145, 0.5555555555555556, 0.5294117647058824, 0.34285714285714286, 0.3125, 0.54, 0.3673469387755102, 0.5833333333333334, 0.2727272727272727, 0.4666666666666667, 0.5454545454545454, 0.3673469387755102, 0.47058823529411764, 0.375, 0.46875, 0.9, 0.75, 0.0, 1.5, 0.0, 1.0, 0.5, 0.4, 0.47368421052631576, 0.47368421052631576, 0.36363636363636365, 0.2727272727272727, 0.36363636363636365, 0.27906976744186046, 0.2608695652173913, 0.5384615384615384, 0.42857142857142855, 0.2857142857142857, 0.4375, 0.5106382978723404, 0.47058823529411764, 0.42857142857142855, 0.36, 0.42857142857142855, 0.375, 0.8571428571428571, 0.0, 1.0, 0.0, 1.5, 0.5, 0.42857142857142855, 0.4090909090909091, 0.3103448275862069, 0.46153846153846156, 0.45454545454545453, 0.2857142857142857, 0.3125, 0.5625, 0.42857142857142855, 0.32432432432432434, 0.5121951219512195, 0.5853658536585366, 0.631578947368421, 0.5853658536585366, 0.45, 0.6363636363636364, 0.5769230769230769, 0.8181818181818182, 0.25, 1.2, 0.0, 2.0, 0.0, 1.0, 0.6666666666666666, 0.6428571428571429, 0.45, 0.4090909090909091, 0.41379310344827586, 0.2727272727272727, 0.34285714285714286, 0.3157894736842105, 0.2926829268292683, 0.42857142857142855, 0.5526315789473685, 0.39473684210526316, 0.5, 0.42857142857142855, 0.5714285714285714, 0.5, 0.4838709677419355, 0.875, 1.411764705882353, 0.3333333333333333, 0.0, 0.75, 1.0, 1.0, 2.0, 0.9, 0.5625, 0.42857142857142855, 0.3103448275862069, 0.36363636363636365, 0.23076923076923078, 0.2857142857142857, 0.3076923076923077, 0.46875, 0.45652173913043476, 0.4897959183673469, 0.46153846153846156, 0.34615384615384615, 0.21052631578947367, 0.4666666666666667, 0.46875, 0.9, 0.3, 0.0, 0.75, 0.0, 1.5]
	QL=[0.5454545454545454, 0.0, 0.5, 1.0, 0.0, 1.0, 0.0, 0.42857142857142855, 1.25, 0.4, 0.9, 0.8571428571428571, 0.5769230769230769, 0.7272727272727273, 0.5384615384615384, 0.6666666666666666, 0.6136363636363636, 0.0, 0.75, 0.5853658536585366, 0.54, 0.1875, 0.4666666666666667, 0.375, 0.13636363636363635, 1.0, 0.0, 0.75, 1.5, 0.0, 1.0, 0.0, 0.46153846153846156, 0.36, 0.4, 0.21428571428571427, 0.08108108108108109, 0.46153846153846156, 0.5, 0.1276595744680851, 0.23684210526315788, 0.75, 0.13953488372093023, 0.3333333333333333, 0.13636363636363635, 0.30612244897959184, 0.23529411764705882, 0.42857142857142855, 0.7741935483870968, 0.9473684210526315, 0.0, 1.2, 0.0, 1.5, 0.0, 0.5, 0.46153846153846156, 0.47368421052631576, 1.0, 0.4444444444444444, 0.28125, 0.27906976744186046, 0.5106382978723404, 0.05454545454545454, 0.391304347826087, 0.6, 0.3333333333333333, 0.38461538461538464, 0.13953488372093023, 0.23684210526315788, 0.13043478260869565, 0.6486486486486487, 0.6206896551724138, 0.9130434782608695, 0.8, 1.0, 0.0, 1.5, 0.0, 0.75, 0.5, 0.23076923076923078, 0.5, 0.46153846153846156, 0.42857142857142855, 0.24324324324324326, 0.16216216216216217, 0.6666666666666666, 0.27906976744186046, 0.23076923076923078, 0.5675675675675675, 0.5625, 0.06976744186046512, 0.20930232558139536, 0.15, 0.7714285714285715, 0.3870967741935484, 0.14285714285714285, 1.0714285714285714, 0.0, 1.0, 0.0, 1.5, 1.0, 0.8571428571428571, 1.0909090909090908, 0.8823529411764706, 1.08, 0.08823529411764706, 0.3, 0.36585365853658536, 0.4883720930232558, 0.47368421052631576, 0.5769230769230769, 0.84375, 0.5853658536585366, 0.08333333333333333, 0.627906976744186, 0.46153846153846156, 0.6923076923076923, 0.5357142857142857, 1.35, 0.23076923076923078, 1.0, 1.5, 0.0, 1.0, 0.0, 0.8823529411764706, 0.0, 0.6923076923076923, 0.5675675675675675, 0.6176470588235294, 0.3076923076923077, 0.39473684210526316, 0.32608695652173914, 0.3409090909090909, 0.16216216216216217, 0.5526315789473685, 0.574468085106383, 0.375, 0.40384615384615385, 0.2033898305084746, 0.06521739130434782, 0.8, 0.375, 1.3333333333333333, 0.0, 1.5, 0.0, 1.0, 0.5, 0.375, 0.47368421052631576, 0.5217391304347826, 0.6923076923076923, 0.65625, 0.7272727272727273, 0.46153846153846156, 0.4772727272727273, 0.5581395348837209, 0.5454545454545454, 0.07317073170731707, 0.35714285714285715, 0.3076923076923077, 0.29411764705882354, 0.05263157894736842, 0.3409090909090909, 0.6428571428571429, 0.0, 0.3, 0.6, 0.0, 3.0, 0.0, 1.0, 1.0, 0.6521739130434783, 0.6428571428571429, 0.0, 0.7058823529411765, 0.34285714285714286, 0.0625, 0.54, 0.1836734693877551, 0.4166666666666667, 0.4772727272727273, 0.5333333333333333, 0.3409090909090909, 0.4897959183673469, 0.4117647058823529, 0.5, 0.46875, 0.3, 1.0, 1.2, 0.75, 0.0, 1.0, 0.0, 0.2, 1.105263157894737, 0.0, 0.45454545454545453, 0.36363636363636365, 0.09090909090909091, 0.20930232558139536, 0.13043478260869565, 0.3076923076923077, 0.6857142857142857, 0.42857142857142855, 0.5625, 0.06382978723404255, 0.11764705882352941, 0.38095238095238093, 0.54, 0.34285714285714286, 1.0, 0.0, 0.5, 1.0, 0.0, 1.5, 1.5, 0.8571428571428571, 0.13636363636363635, 0.9310344827586207, 0.8076923076923077, 0.7272727272727273, 0.35714285714285715, 0.25, 0.5625, 0.42857142857142855, 0.7297297297297297, 0.21951219512195122, 0.2926829268292683, 0.7105263157894737, 0.14634146341463414, 0.6, 0.6363636363636364, 0.5769230769230769, 0.5454545454545454, 0.0, 0.6, 0.0, 3.0, 0.0, 1.0, 0.0, 0.42857142857142855, 0.15, 0.8181818181818182, 0.7241379310344828, 0.18181818181818182, 0.5142857142857142, 0.07894736842105263, 0.6585365853658537, 0.42857142857142855, 0.23684210526315788, 0.3157894736842105, 0.07142857142857142, 0.6428571428571429, 0.07142857142857142, 0.5, 0.4838709677419355, 0.25, 0.8823529411764706, 0.3333333333333333, 0.0, 1.5, 0.0, 1.0, 0.0, 0.3, 0.9375, 0.0, 0.7241379310344828, 0.36363636363636365, 0.0, 0.14285714285714285, 0.3076923076923077, 0.65625, 0.5869565217391305, 0.3673469387755102, 0.5192307692307693, 0.40384615384615385, 0.2631578947368421, 0.4666666666666667, 0.375, 0.75, 0.6, 0.0, 0.75, 1.0]
	ARIMA=[0.6818181818181818, 1.5, 1.0, 1.0, 3.0, 2.0, 2.0, 0.8571428571428571, 0.5, 0.4, 0.45, 0.32142857142857145, 0.46153846153846156, 0.45454545454545453, 0.3076923076923077, 0.4166666666666667, 0.4090909090909091, 0.5, 0.5833333333333334, 0.21951219512195122, 0.3, 0.375, 0.4666666666666667, 0.75, 0.8181818181818182, 1.0, 0.8571428571428571, 0.75, 3.0, 6.0, 2.0, 0.8571428571428571, 0.46153846153846156, 0.24, 0.3, 0.5357142857142857, 0.4864864864864865, 0.3076923076923077, 0.42857142857142855, 0.44680851063829785, 0.5526315789473685, 0.65625, 0.3488372093023256, 0.26666666666666666, 0.4090909090909091, 0.42857142857142855, 0.4117647058823529, 0.5, 0.7741935483870968, 0.7894736842105263, 1.3333333333333333, 0.6, 2.0, 3.0, 2.0, 1.0, 0.46153846153846156, 0.3157894736842105, 0.3333333333333333, 0.4444444444444444, 0.46875, 0.27906976744186046, 0.3191489361702128, 0.38181818181818183, 0.5217391304347826, 0.6857142857142857, 0.5, 0.3076923076923077, 0.3488372093023256, 0.47368421052631576, 0.391304347826087, 0.40540540540540543, 0.7241379310344828, 0.6521739130434783, 0.6, 2.0, 1.5, 6.0, 3.0, 1.5, 1.0, 0.46153846153846156, 0.3333333333333333, 0.34615384615384615, 0.34285714285714286, 0.40540540540540543, 0.4864864864864865, 0.5833333333333334, 0.4883720930232558, 0.38461538461538464, 0.4864864864864865, 0.3125, 0.4186046511627907, 0.4883720930232558, 0.45, 0.6, 0.4838709677419355, 0.5714285714285714, 1.0714285714285714, 1.0, 1.0, 3.0, 3.0, 2.0, 0.8571428571428571, 0.5454545454545454, 0.35294117647058826, 0.36, 0.2647058823529412, 0.3, 0.43902439024390244, 0.4883720930232558, 0.5526315789473685, 0.8076923076923077, 0.46875, 0.21951219512195122, 0.3333333333333333, 0.4186046511627907, 0.28846153846153844, 0.5384615384615384, 0.8571428571428571, 0.75, 0.6923076923076923, 1.0, 0.75, 2.0, 2.0, 0.8571428571428571, 0.35294117647058826, 0.25, 0.34615384615384615, 0.32432432432432434, 0.4411764705882353, 0.46153846153846156, 0.39473684210526316, 0.391304347826087, 0.3409090909090909, 0.5675675675675675, 0.47368421052631576, 0.3191489361702128, 0.375, 0.40384615384615385, 0.4067796610169492, 0.5217391304347826, 0.9, 1.125, 1.0, 1.0, 3.0, 2.0, 2.0, 1.0, 0.375, 0.3157894736842105, 0.391304347826087, 0.46153846153846156, 0.375, 0.45454545454545453, 0.38461538461538464, 0.4090909090909091, 0.4186046511627907, 0.6363636363636364, 0.43902439024390244, 0.2857142857142857, 0.46153846153846156, 0.4117647058823529, 0.2631578947368421, 0.5454545454545454, 0.9642857142857143, 0.9, 0.9, 1.2, 1.5, 6.0, 2.0, 1.0, 0.5, 0.2608695652173913, 0.21428571428571427, 0.4444444444444444, 0.4411764705882353, 0.34285714285714286, 0.3125, 0.36, 0.42857142857142855, 0.6666666666666666, 0.5454545454545454, 0.26666666666666666, 0.4090909090909091, 0.42857142857142855, 0.4117647058823529, 0.4375, 0.75, 0.9, 1.0, 1.2, 0.75, 3.0, 2.0, 1.0, 0.4, 0.3157894736842105, 0.47368421052631576, 0.36363636363636365, 0.36363636363636365, 0.5454545454545454, 0.3488372093023256, 0.391304347826087, 0.5384615384615384, 0.6857142857142857, 0.35714285714285715, 0.375, 0.3829787234042553, 0.4117647058823529, 0.38095238095238093, 0.48, 0.7714285714285715, 0.75, 0.8571428571428571, 1.0, 1.0, 3.0, 3.0, 1.0, 0.42857142857142855, 0.2727272727272727, 0.3103448275862069, 0.46153846153846156, 0.45454545454545453, 0.2857142857142857, 0.3125, 0.375, 0.5, 0.6486486486486487, 0.43902439024390244, 0.36585365853658536, 0.47368421052631576, 0.43902439024390244, 0.45, 0.5454545454545454, 0.5769230769230769, 0.5454545454545454, 0.75, 1.2, 1.0, 6.0, 3.0, 2.0, 0.6666666666666666, 0.42857142857142855, 0.3, 0.4090909090909091, 0.41379310344827586, 0.45454545454545453, 0.42857142857142855, 0.47368421052631576, 0.43902439024390244, 0.5142857142857142, 0.5526315789473685, 0.39473684210526316, 0.42857142857142855, 0.42857142857142855, 0.42857142857142855, 0.5833333333333334, 0.6774193548387096, 0.625, 0.7058823529411765, 1.0, 1.2, 0.75, 2.0, 2.0, 2.0, 0.6, 0.375, 0.2857142857142857, 0.3103448275862069, 0.36363636363636365, 0.38461538461538464, 0.42857142857142855, 0.46153846153846156, 0.65625, 0.32608695652173914, 0.24489795918367346, 0.40384615384615385, 0.46153846153846156, 0.42105263157894735, 0.4666666666666667, 0.75, 0.9, 0.9, 2.0, 0.75, 2.0]

	plt.plot(ARIMA,"k-",label='ARIMA')
	plt.plot(QL,"b-",label='Q-Learning')
	plt.plot(DQN,"g-",label='The Proposed')
	plt.xlabel("Time (hours)")
	#plt.ylabel("Profit per slice request")
	#plt.ylabel("Revenue per slice request")
	plt.ylabel("Cost per slice request")
	plt.legend()
	#plt.savefig('Prealtime.jpg', dpi=600, bbox_inches='tight')
	#plt.savefig('Rrealtime.jpg', dpi=600, bbox_inches='tight')
	plt.savefig('Crealtime.jpg', dpi=600, bbox_inches='tight')
	plt.show()

#畫profit, cost, revenue對各個不同offloading alg與learning alg的圖
def draw_bar():
	#profit
	#DQL=[0.4774*302, 0.230882*302, 0.138*302, 0.1227*302, -0.095*302, -0.278*302]
	#QL=[0.46*302, 0.15736*302, 0.09343*302, 0.08336*302, -0.095*302, -0.454*302]
	#ARIMA=[0.32284*302, -0.015*302, -0.11173*302, -0.125*302, -0.095*302, -0.57*302]

	method=['The Proposed (AO)', 'GA', 'PSO', 'Greedy', 'FLE', 'FRE']
	x=np.arange(len(method))
	W=0.3
	
	#以下為圖用的數據, 如要跑profit則把註解拿掉並把y軸改成profit 依此類推
	
	#revenue -95.8453
	#DQL=[324.9341, 222.46, 199.24, 175, -0.095*302, 170]
	#QL=[313.1467, 206.325, 174.73, 158.736, -0.095*302, 78.05]
	#ARIMA=[337.202, 227.656, 205.9487, 200.68, -0.095*302, 62.385]
	
	#cost
	#DQL=[166.47, 152.73, 157.766, 137.4358, 0, 249.503]
	#QL=[174.3704, 158.78, 145.8044, 133.56128, 0, 215.1587]
	#ARIMA=[239.3652878, 239.3652878, 239.3652878, 239.3652878, 0, 239.3652878]

	#profit
	#DQL=[158.43, 69.76, 41.474, 37.5642, -0.095*302, -79.5]
	#QL=[138.7763, 47.545, 28.9256, 25.17472, -0.095*302, -137.108]
	#ARIMA=[97.8367122, -11.7092878, -33.4163, -38.685, -0.095*302, -171.98]
	plt.bar(x, DQL, W, color='g', label='The Proposed (DQN)')
	plt.bar(x+W, QL, W, color='b', label='Q-Learning')
	plt.bar(x+W+W, ARIMA, W, color='r', label='ARIMA')
	plt.xticks(x+W, method)
	plt.ylabel("Profit")
	#plt.ylabel("Revenue")
	#plt.ylabel("Cost")
	plt.legend()
	plt.savefig('Profit.jpg', dpi=600, bbox_inches='tight')
	#plt.savefig('Revenue.jpg', dpi=600, bbox_inches='tight')
	#plt.savefig('Cost.jpg', dpi=600, bbox_inches='tight')
	plt.show()

#畫DNN converge時的loss對不同neuron, layers的圖
def draw_DNNln():
	#如需自己重跑  需再DQN()中 自己改DNN裡面的參數
	#如要多一層就加 DNN.add(Dense(60, activation="relu")) 要改neuron數就改dense的60

	x=[1,2,3,4,5,6,7]
	x1=[11.65768, 10.18747, 9.04659, 8.54489, 8.23213, 7.79920, 7.576]
	x2=[11.52235, 9.68718, 7.89965, 6.75554, 6.17239, 5.89148, 5.73520]
	x3=[11.30858, 9.056, 6.682, 5.645, 5.252, 4.956, 4.79748]
	x4=[11.28603, 8.9, 6.5, 5.2, 4.7, 4.39043, 4.15912]
	x5=[11.2, 8.13160, 5.7, 4.5, 3.82712, 3.5, 3.40269]
	x6=[11.14326, 7.9, 5.51983, 4.25993, 3.7, 3.44, 3.29859]

	plt.plot(x, x1, "go-",label='20 neurons/layer')
	plt.plot(x, x2,"b*-",label='30 neurons/layer')
	plt.plot(x, x3,"ks-",label='40 neurons/layer')
	plt.plot(x, x4,"yD-",label='50 neurons/layer')
	plt.plot(x, x5,"rp-",label='60 neurons/layer')
	plt.plot(x, x6,"cx-",label='70 neurons/layer')
	plt.xlabel("Number of layers")
	plt.ylabel("Loss")
	plt.legend()
	plt.savefig('DNNln.jpg', dpi = 600, bbox_inches='tight')
	plt.show()

DQL()